<template>
  <div id="boardsView" class="boards" @click='closePop'>
    <transition name="fade" mode="out-in" appear>
      <div class="po-test-side-list" v-show='showBackLogList'>
          <div class="po-side-list-header">
              <i-button id="closeBackLog" size="small" class="pull-right" @click="closeBackLog">
                <Icon  type="close-round"></Icon>
              </i-button>
              <div class="pull-left" title="">
                  <p class='left title-common ' :class="'backlog'+backLogIcon" >
                    <span v-if='backLogRootPath.text'>{{backLogRootPath.text}}</span>
                    <span v-if='backLogFolderPath.text'>/{{backLogFolderPath.text}}</span>
                  </p>
              </div>
        </div>
        <div class="po-side-list-content" id='po-side-list-content'>
              <!--begin test-->
                <div class='backLogList' v-dragula="backLogList" service="shared-service" drake="drakecopy">
                  <div class="list_item" v-for='backLogItem in DEV.backLogList' :key="backLogItem">
                      {{ backLogItem}}
                  </div>
                </div>
              <!--end test-->
         </div>
      </div>
    </transition>
    <div class="boards-title" :class="{haspadding:showBackLogList,hasRightPadding:hasRightPadding}">
        <div class="wrapper">
          <div class='container'
               v-for='(list,$statusIndex) in DEV.devBoardTasks' 
               :status="list.ChoiceId"
               >
             <div class='status-menu' :class="'list'+$statusIndex">
                {{list.ChoiceName}}
                <span class="totalTask right">{{list.children.length}}/{{ list.total }}</span>
             </div>
             <div class="boardcontent"
                   :status="list.ChoiceId"
                   :id="$statusIndex"
                   :name="list.ChoiceName"
                   v-dragula="boardcontent"
                   service="shared-service" 
                   drake="drakecopy">
                <span class="to-add-card" @click="addNewTask" v-show='$statusIndex == 0'>
                  <div class="add-card-wrapper">
                    <div class="add-card-box" id="add-card-box" title="New Task">
                      <span class="icon-ad">+</span>
                    </div>
                    <div class="form-box" id="form-box">
                      <div class="form-box-content">
                        <div class="form-input-wrapper">
                          <input
                            type="text"
                            maxlength="200"
                            :status="list.ChoiceId"
                            placeholder="New Task"
                            class="newinput"
                            ref ='newTaskTitle'
                            v-model="newTaskTitle"
                            @keyup.enter ='addTask($event)'
                          >
                        </div>
                        <span class="icon-btn form-input-btn" :status="list.ChoiceId" @click.stop="addTask($event)">+</span>
                      </div>
                    </div>
                  </div>
                </span>
                <div class='action-card'
                    v-for='(item,$taskIndex) in list.children' 
                    :key="item.taskId" 
                    :id="'task'+item.taskId" 
                    :owner="item.values[2].value"
                    @click.stop='editTask(item)'
                    :class="{active: cardActive == item.taskId}">
                  <div class="card-content right" style="width:20%;" id="card-content" v-if="item.values.assigned !== ''">
                      <Poptip style="float:right;" 
                              placement="bottom"
                              width="200" 
                              :poptipid="'owner'+item.taskId"
                              >
                          <p class="bg-content right" 
                             :class="item.values[2].value | assignedName"
                             :title="item.values[2].value |assignedName"
                             @click.stop="changeAssign"
                             > 
                            {{item.values[2].value | assignedName}}
                          </p>
                          <div class="clearfix"></div>
                          <div class="api" slot="content">
                              <div class="assign-title">
                                 <h3 class="left">Assign Task</h3>
                                 <a href="javascript:void(0)" class="manage right">Manage</a>
                                 <div class="clearfix"></div>
                              </div>
                              <Input v-model="findMember" placeholder="Find Member" @on-focus.stop="inputFocus($event)"></Input>
                              <ul class="member-list">
                                <li class="member-item" v-for="member in projectMember" @click.stop="chooseMember(list.ChoiceId,$statusIndex,$taskIndex,member)">
                                  <!-- v-for="member in members"-->
                                  <div class="member-abbr left"
                                       :class="member.ChoiceName | assignedName"
                                      >
                                    {{member.ChoiceName | assignedName}}
                                  </div>
                                  <div class="member-name left">
                                    {{member.ChoiceName}}
                                    <Icon type="checkmark" class="check" v-if="member.ChoiceName == item.values.assigned"></Icon>
                                  </div>
                                  <div class="clearfix"></div>
                                </li>
                              </ul>
                              <div class="add-member">
                                  <div class="add-icon left">
                                      <Icon type="plus-round"></Icon>
                                  </div>
                                  <a href="javascript:void(0)" class="add-text left" @click.stop="addMember($event)">Add members</a>
                                  <div class="clearfix"></div>
                              </div>
                          </div>
                      </Poptip>
                      <div class="clearfix"></div>
                  </div>
                  <h4 class="card-msg left" style="width:80%;">
                        <p>{{item.values[1].value}}</p>
                  </h4>
                  <div class="clearfix"></div>
                  <div class="card-meta">
                      <div class="card-properties left">
                        <i class="icon-planlet"></i>
                        <i class="icon-calendar"></i>
                      </div>
                      <p class="id-badge right">ID:{{item.taskId}}</p>
                      <div class="clearfix"></div>
                  </div>
                </div>
             </div>
          </div>
        </div>
    </div>
    <div class="invite-wrapper" id="invite-wrapper">
        <Modal v-model="modal" @on-cancel="modalCancel" title="Invite Member" ok-text="ok" cancel-text="cancel" @on-ok="inviteOk">
            <div class="member-info member-co">
              <label>Email address or name</label><br>
              <Input v-model="personEmail" placeholder="Enter recipients ..." style="width: 300px"></Input>
            </div>
            <div class="member-mes member-co">
              <label>Personal message</label>
              <Input v-model="personMes" type="textarea" :rows="4" placeholder="this is optional..."></Input>
            </div>
            <div class="member-choose">
              <Radio v-model="memberChoose">Send invite via Email</Radio>
            </div>
        </Modal>
    </div>  
    <edit-panel
      v-show:editPanelShow="showEditPanel"
      :currentCardInfo="cardInfo"
      :transferedProjectId = "projectId"
      @listStatusIndex="hasListenedIndex"
      @closeEditPanel="getEventData"
      @hasSaved="updateTask"
      >
    </edit-panel>
  </div>
</template>
<script>
  import Vue from 'vue';
  import editPanel from '../../common/editPanel/EditPanel';
  import folder from '../../common/folder/Folder';
  import { VueEditor } from 'vue2-editor';
  import { mapState,mapMutations,mapActions,mapGetters} from 'vuex';
  export default {
    created () {
      var index = 0;
      var _this = this;
      this.$dragula.createService({
        name: 'shared-service',
        drake: {
            drakecopy: {
              copy: false,
            }
        }
      }).on({
          'shared-service:removeModel': ({name, el, source, dragIndex, model}) => {
          el.classList.remove('ex-moved');
      },
      'shared-service:dropModel': ({name, el, source, target, dragIndex, dropIndex, model}) => {
        this.tempIndex= Number($(target).attr("id"));
        console.log("dropModel")
      },
      accepts: ({el, target}) => {
        return true ;
      },
      drag: ({el, source, target, container}) => {
        el.classList.remove('ex-moved')
        el.classList.remove('active');
      },
      drop: (opts) => {
        if($('#boardsView').length > 0){
          const {el, container, source} = opts
        //  debugger;
          //let tagName = el.tagName.toLowerCase();
          if(container == null){
            opts.drake.remove();
          }
          else if($(source).hasClass('backLogList') && $(container).hasClass('boardcontent')){
            // list to boards
            $(container).find('.list_item').css({"color":"transparent","display": "none"});
            let newTitle = $(el).text().trim();
            let dropedStatusId = $(container).attr('status');
            let dropedStatusIndex = $(container).attr('id')
            const CREATE_TASK_BOARD =DevTrackApi +'Task/Create';
            var taskObj = {
              projectId: _this.projectId,
              subprojectId: _this.subProjectId,
              statusId: dropedStatusId,
              taskId: 0,
              data: [
                    {id: 101, value: newTitle}
                  ]
            }
            this.axios.post(CREATE_TASK_BOARD,taskObj).then(res=>{
                if(res.data.Success) {
                  var taskId = res.data.Data.Data;
                  var taskObj = {
                    message:"",
                    success:true,
                    taskId:taskId,
                    values: {
                      status:dropedStatusId,
                      title:newTitle,
                      type:"",
                      assigned:"",
                    }
                  }
                  // 更新视图
                  this.boardViewTasks[dropedStatusIndex].children.unshift(taskObj);
                  this.changeBoardViewTasks(this.boardViewTasks);
                  $(container).find('.list_item').remove();
                }else {
                  console.log("The http response false")
                }
              },err=>{
                console.log(err)
            })
          }
          else if($(opts.source).hasClass('boardcontent') == true && $(opts.container).hasClass('boardcontent') == true)  
          //board to board
          { 
              let taskid = $(opts.el).attr('id').replace(/[^0-9]/ig,"");// get taskid
              // console.log(taskid)
              let sourceStatusId= $(opts.source).attr('status');
              let targetStatusId= $(opts.container).attr('status');
              let sourceIndex= $(opts.source).attr('id');

              let targetIndex= $(opts.container).attr('id');

              _this.currentStatus =$(opts.el).parent().attr('name')
              if(typeof(_this.currentStatus) !== undefined){
                const MOVED_URL = DevTrackApi+'task/Update';
                this.axios.post(MOVED_URL,{
                  token: APIToken,
                  projectId:_this.projectId,
                  taskId:taskid,
                  data:[{id:601,choiceid:targetStatusId}]
                }).then(res=>{
                  if(res.status == 200){
                    let title = $(opts.el).find('h4').text().trim();
                    let owner = $(opts.el).attr("owner");
                    let boardViewTasks = this.boardViewTasks;
                    let prevsiblingsCount =$(opts.el).prevAll().length;

                    for(let i=0; i<boardViewTasks.length;i++) {
                      if(boardViewTasks[i].ChoiceId == targetStatusId){
                        let childrenObj = {
                          "taskId": taskid,
                          "message": "",
                          "success": true,
                          "values": { "status": targetStatusId,"title": title, "assigned": owner}
                        }
                        let childrenCount = boardViewTasks[i].children.length;
                        
                        if( childrenCount > 0){
                          if( prevsiblingsCount == 1){
                            boardViewTasks[i].children.unshift(childrenObj);
                          }else if( prevsiblingsCount == childrenCount - 1){
                            boardViewTasks[i].children.push(childrenObj);
                          }else{
                                boardViewTasks[i].children.splice(prevsiblingsCount - 1, 0, childrenObj);
                          }
                        }else {
                          boardViewTasks[i].children.push(childrenObj);
                        }
                        //remove old task in old status 
                        for(let j = 0 ; j < boardViewTasks.length; j++){
                          if(boardViewTasks[j].ChoiceId == sourceStatusId){
                            var found = false;
                            var k = 0;
                            for(; k < boardViewTasks[j].children.length; k++){
                              if( taskid == boardViewTasks[j].children[k].taskId){
                                  found = true;
                                  break;
                              }
                            }
                            if(found){
                              boardViewTasks[j].children.splice(k,1);
                              break;
                            }
                          }
                          $(opts.source).children("div[id=" +'task'+taskid +"]").remove();
                        }
                        this.changeBoardViewTasks(boardViewTasks);
                        break;
                      }
                    }
                    
                  }
                },err=>{
                  console.log(err)
                })
                //opts.drake.remove();
              }
          }else if($(source).hasClass('boardcontent') && $(container).hasClass('backLogList')){
          // board to list
            let itemTitle = $(el).find('h4').text().trim();
            let taskId = Number($(el).find('.card-meta').text().trim().replace(/[^0-9]/ig,''));
            $(container).find('.action-card').css({"color":"transparent","display": "none"});
            const CREATE_BACKLOG =DevTrackApi +'Task/Create';
            var taskObj = {
              projectId: _this.projectId,
              subprojectId: _this.backLogId,
              statusId: '',
              taskId: 0,
              data: [
                    {id: 101, value: itemTitle}
                  ]
            }
            this.axios.post(CREATE_BACKLOG,taskObj).then(res=>{
                if(res.data.Success) {
                  var taskId = res.data.Data.Data;
                  var backlogItem  =itemTitle; 
                  this.backLogList.unshift(backlogItem);
                  // 更新backlog视图
                 this.addBackLogList(this.backLogList);
                 $(container).find('.action-card').remove();
                }else {
                  console.log("The http response when create backlog item")
                }
              },err=>{
                console.log(err)
            })
            //delete task in boards view
            const DEL_TASK = DevTrackApi +'Task/Delete';
            
          }
          el.classList.add('ex-moved');
          
        }
        // opts.drake.remove();
      },
      over: ({el, container}) => {
        var overTagName = $(container).get(0).tagName.toLowerCase();// hover table or div
        var elTagName = $(el).get(0).tagName.toLowerCase();// dragged element tr or div
        if( overTagName == 'div'){
            if(elTagName !== 'div'){
              $(el).children().css({"margin-left":"16px"})
              $(el).children().css({"width":"144px","border-radius":"5px"});
            }
        }
        var tagName = $(el).get(0).tagName.toLowerCase();
        if (tagName == 'div')  {
            el.classList.add('ex-moved')
            el.classList.add('bg-placeholder');
        }else {
          el.classList.add('tr-ex-moved');
        }
      },
      out: ({el, container}) => {
        el.classList.add('ex-moved')
        el.classList.remove('bg-placeholder')
      }
    });
      this.uppercaseFilter();//filter uppercase
      this.dateFilter();//time transfter
      this.assignedName();//filter name abbrasive
      this.cardInfo = {};
      this.initBackLog();
      window.onresize = function(event) {
        _this.initGUI();
      };
      document.onclick=function(e){
        _this.cardActive = '',
        _this.changeEditPanelStatus({b:false});
        var currentComponent = e.path;
       for(let i=0;i<currentComponent.length; i++) {
         if($(currentComponent[i]).attr("class")  == 'editPanel'){
           _this.changeEditPanelStatus({b:true});
          }
        }
      }
    },
    mounted() {
      this.initGUI();
      this.getScrollHeight();
    },
    beforeUpdate(){
      if(this.tempIndex != 0) {
        var temp =[];
        var index = this.tempIndex;
        var tasks = this.boardViewTasks[index].children;
        //begin
      //   var t=0;
      //   var temp=[];
      //   for(var i=0;i<tasks.length;i++){
      //     var isTrue = true;
      //     for(var j=i+1;j<tasks.length;j++) {
      //       if(tasks[i].taskId == tasks[j].taskId) {
      //         isTrue = false;
      //         break;
      //       }
      //     }
      //     if(isTrue) {
      //       temp[t] =tasks[i];
      //       t++;
      //     }
      //   }
      //   this.boardViewTasks[index].children = temp;
      //   this.changeBoardViewTasks(this.boardViewTasks)
      }
    },
    data: function() {
      return {
        hasRightPadding: false,
        tempIndex: 0,
        list:[],
        currentStatus:'',
        GroupByItems: [
          { name: 'None'},
          { name: 'Status Group'},
        ],
        showSettingPopTip:false,
        ListByValue: 'StatusBy',
        GroupByValue: 'None',
        showAssignedPop: false,
        newTaskTitle: '',
        showScroll: false,
        ListItems: [],
        projectSpaceTxt: '',
        parentTxt: '',
        childTxt: '',
        editorContent: ' ',
        project: '',
        showOwnerPanel: false,
        isClick: false,
        boardcontent:[],
        box: [ ],
        end: '',
        settingListShow: false,//show status list
        isTransform: false,
        showProjectList: true,
        projectList: '',//project list data
        tasks: [ ],//store all project tasks
        sprintList: true,
        filterByItems: [
          { name: 'Followed by',icon:'followby'},
          { name: 'Assigned by',icon:'assigned'},
          { name: 'Due date',icon:'duedate'},
          { name: 'Tags',icon:'tags'},
          { name: 'Status by',icon:'statusby'}
        ],
        isFilterShow: false,
        isSearchPanelShow: false,
        cardInfo: {},//data
        filterMonthShow: false,
        statusList: [ ],
        selectedStatusIndex: [], //use for store selected status to display
        newTaskOwner: [],
        subProjects: [],
        sprintListIcon: false,
        selectContent: '',
        sprints: '',
        showTaskList: true,
        sprintsTasks: '',
        folders: '',
        folderList: '',
        pathIconType: '',
        tempFlag: '',//中转 临时存放vuex中flag,
        modal: false,
        memberChoose: false,
        personEmail:'',
        personMes:'',
        findMember:'',
        cardActive:''
      }
    },
    computed: {
      backLogIcon() {
          if ((this.backLogRootPath.text == '') && (this.backLogFolderPath.text =='')) {
            return this.$store.state.backLogRootPath.subType;
          }else {
            return this.$store.state.backLogRootPath.subType;
          }
      },
      pathIcon() {
        if ((this.parentTxt == '') && (this.childTxt =='')) {
          return this.$store.state.subProjectType;
        }else {
          return this.pathIconType;
        }
      },
      proId() {
        return this.$store.state.projectId;
      },
      subId() {
        return this.$store.state.subProjectId;
      },
      projectSecondLevelText(){
        return this.$store.state.secondLevel.text;
      },
      projectSecondLevelIcon(){
        return this.$store.state.secondLevel.subType;
      },
      projectThirdLevelText(){
        return this.$store.state.thirdLevel.text;
      },
      projectThirdLevelIcon(){
        return this.$store.state.thirdLevel.subType;
      },
      projectBase() {
        return this.$store.state.projectBase;
      },
      projectSpace(){
        return this.$store.state.selectContent;
      },
      isBoardsBackend:{
        get(){
          this.$store.state.isBoardsBackend;
        },
        set(){

        }
      },
      ...mapState(['DEV','projectMember','backLogList','backLogId','showBackLogList','boardViewTasks','members','projectId','subProjectId','currentTaskId','boardViewTasks','backLogId','backLogList','backLogRootPath','backLogFolderPath','storeAllTasks','storeAllStatus','showEditPanel','newTaskId','taskTitle','flagForNewTitle','tempId'])
    },
    methods: {
      getScrollHeight(){
        let _this = this;
        $('.boardcontent').scroll(function(){
          let columnScrollTop = $(this).scrollTop(); // scroll height
          let columnHeight = $(this).height();//column height
          let allContentHeight = $(this)[0].scrollHeight; // need scroll height
          if(columnScrollTop + columnHeight >= allContentHeight){
            let statusId = $(this).attr('status');
            let statusIndex = $(this).attr('id');
            _this.getPerStatusTask({"statusId":statusId,'statusIndex':statusIndex})
            }else if(columnScrollTop == 0){
              // reach top
              console.log("top")
            }
          })
      },
      initBoardView(){
        // this.getTasksData();
      },
      initGUI() {
       $('.po-test-side-list').height(window.innerHeight-107);
        $('.wrapper').height(window.innerHeight-107).width(window.innerWidth).
            css('display','inline-block').css('position','relative').css('overflow-x','scroll').css('overflow-y','hidden');
        $('.boardcontent ').height(window.innerHeight-163);
        $('#boards').height(window.innerHeight-107).width(window.innerWidth);
        if($('.po-test-side-list:visible').length > 0)
        {
          $('.wrapper').width(window.innerWidth-350);
        }
      },
      initStatuswrapper() {
         var statusNumber = this.statusList;
      },
      initBackLog() {
        this.showBackLogList = false;
      },
      editTask(item) {
          if (this.cardActive =='' || this.cardActive != item.taskId) {
            this.cardActive = item.taskId;
            this.changeEditPanelStatus({b:true});
            this.cardInfo = item;
          }else {
            this.cardActive = '';
            this.changeEditPanelStatus({b:false});
            this.cardInfo = {};
          }
      },
      showSearchPanel(e) {
          // this.isSearchPanelShow = true;
          e.stopPropagation();
      },
      closePop(){
          this.isSearchPanelShow = false;
          this.isBoardsBackend = false;
          $(".search-mes").removeClass("transform");
      },
      initTree(projectBaseId,subProjectSpaceId) {
        const SUB_PRO_URL = DevTrackApi + '/SubProject/GetTree';
        this.axios.post(SUB_PRO_URL,{
            token:APIToken,
            projectId: projectBaseId,
            subprojectId: subProjectSpaceId,
        }).then(res=>{
            this.sprints = res.data.Data.nodes;
            for(var i=0; i<this.sprints.length; i++) {
              if(this.sprints[i].subprojectType == 2002){
                this.changeListIcon(true);
                this.changeBackLogId(this.sprints[i].subprojectId);
              }else {
                this.changeListIcon(false)
              }
            }
        },err=>{
            console.log(err);
        })
      },
      fullScreen() {// full Screen
        var el = document.documentElement;
        var rfs = el.requestFullScreen || el.webkitRequestFullScreen || el.mozRequestFullScreen || el.msRequestFullScreen;
        if (typeof rfs != "undefined" && rfs) {
          rfs.call(el);
        } else if (typeof window.ActiveXObject != "undefined") {
          var wscript = new ActiveXObject("WScript.Shell");
          if (wscript != null) {
            alert("Please press F11");
            wscript.SendKeys("{F11}")
          }
        }
      },
      openSearchPanel(e){
        this.isTransform = true;
        
        $(".search-mes").addClass("transform");
        e.stopPropagation();
      },
      closeSearchPanel(e){
        this.isSearchPanelShow=false;
        this.isBoardsBackend = false;
        $(".search-mes").removeClass("transform");
        e.stopPropagation();
      },
      openFilter(){
        this.isFilterShow = true;
        this.isBoardsBackend =true
      },
      closeFilter(){
        this.isFilterShow = false;
        this.isBoardsBackend = false
      },
      addNewTask(){
        $("#add-card-box").css('display',"none");
        $("#form-box").css('display',"block");
      },
      newinputBlur(){
      },
      getEventData(b){
        //this.showEditPanel = b;
      },
      cardEnd(){
        this.end = true;
      },
      uppercaseFilter( ){//定义字母大写过滤器
        Vue.filter('uppercase', function(value) {
          if (!value) { return ''}
          value = value.toString()
          return value.toUpperCase();
        })
      },
      dateFilter( ) { //自定义时间过滤器
        Date.prototype.format = function(format){}
        
        Vue.filter('date',function (value) {
          var ddd = new Date(value);
          return ddd.format('yyyy/MM/dd');
        })
      },
      hasListenedIndex(index){//watcher Status index
      
      },
      filterMonth( ) {
        this.filterMonthShow = true;
      },
      allProjectList(event) {
        //  hide or show all project list
        let _display = $(event.currentTarget).siblings('ul').css("display");
        if ( _display == 'none'){
          $(event.currentTarget).addClass("firstIconRotate");
          $(event.currentTarget).siblings('ul').css("display","block");
        }else {
          $(event.currentTarget).removeClass("firstIconRotate");
          $(event.currentTarget).siblings('ul').css("display","none");
        }
      },
      getStatusList() {
        
        const STATUS_LIST = DevTrackApi+'Field/ChoiceList?token='+APIToken+'&projectid='+this.projectId+'&fieldid=601&languageid=1';
        this.$http.get(STATUS_LIST).then( response =>{
          // this.statusList = response.body.data;
          this.addAllStatus(response.body.data);
          // this.getTasksData();
        }, error =>{
            console.log(error);
        });
      },
      chooseStatus() {
        this.settingListShow = true;
      },
      btnOk(){//点击时，筛选出未被选中的状态，同时设置为隐藏
        let statusIndexArr = this.selectedStatusIndex;
        let statusList =new Array(0,1,2,3,4,5,6);
        let t=[];//被选中的状态index
        let tt=[];//未被选中的状态index
        let temp = statusIndexArr.toString();
        for(let i=0; i<statusList.length; i++) {// 临时存放被选中/未选中的index
          if (temp.indexOf(statusList[i]).toString() > -1) {
            t.push(statusList[i]);
          }else {
            tt.push(statusList[i]);
          }
        }
        for( let j=0 ; j<t.length; j++) {//只要被选中，全部为true
          let statusIndex = t[j];
          this.statusList[statusIndex].IsActive = true ;
          $('.wrapper').children().eq(statusIndex).show();
        }
        for(let m =0; m<tt.length; m++) {//未被选中，一直为false
          let sIndex = tt[m];
          this.statusList[sIndex].IsActive = false ;
          $('.wrapper').children().eq(sIndex).hide();
        }
        this.settingListShow = false;
      },
      btnNo( ) {
        this.settingListShow = false;
      },
      assignedName() {
        Vue.filter('assignedName', function(value) {
          let arr =value.split(' ');
          let list=[];
          for(var i=0; i<arr.length; i++) {
            list.push(arr[i].charAt(0));
          }
          let last = list.join("");
          return last;
        })
      },
      updateTask(){
        location.reload();
      },
      changeSecondLevel(text,subType){
        this.$store.commit({
          type: 'changeSecondLevel',
          text: text,
          subType: subType
        })
      },
      searchTask() {
      },
      showSubProject(projectId,subId){
        const SUB_PRO_URL = DevTrackApi+ '/SubProject/GetTree';
        this.$http.post(SUB_PRO_URL,{
            token: APIToken,
            projectId: projectId,
            subprojectId: subId,
        }).then(res=>{
            this.subProjects = res.body;
            this.sprints = res.body.Data.nodes;
            // this.subProjects = res.body.nodes;
        },err=>{
          console.log(err);
        })
      },
      showSubSprint(subId) {
        $(event.currentTarget).addClass("rotate");
        let display = $(event.currentTarget).siblings('ul').css("display");
        if ( display == 'none'){
          $(event.currentTarget).addClass("rotate");
          $(event.currentTarget).parent().siblings().find('ul').hide();
          $(event.currentTarget).siblings('ul').css("display","block");
        }else {
          $(event.currentTarget).removeClass("rotate");
          $(event.currentTarget).siblings('ul').css("display","none");
        }
      },
      switchSprintDisplay(projectId,subprojectId) {
        this.changeIds({projectId:projectId,subProjectId:subprojectId})
        const GET_SUB = DevTrackApi + '/Task/Query'
      },
      showSprintTask(e,index) {
        e.stopPropagation();
        var flag = false;
        if ( $(event.currentTarget).hasClass('rotate') ){
            $(event.currentTarget).removeClass("rotate");
            $(event.currentTarget).siblings('ul').css("display","none");
        } else {
            $(event.currentTarget).addClass("rotate");
            $(event.currentTarget).parent().siblings().find('ul').hide();
            $(event.currentTarget).siblings('ul').css("display","block");
            flag = true;
        }
        if( flag ) {//点击时做出判断，是否重新发送请求
          this.$nextTick(function(){
            let proId = this.$store.state.projectId;
            var subId= this.sprints[index].subprojectId;
            const SUB_PRO_URL = DevTrackApi + '/SubProject/GetTree';
            this.$http.post(SUB_PRO_URL,{
              token: APIToken,
              projectId: proId,
              subprojectId: subId,
            }).then(res=>{
              this.folders = res.body.Data.nodes;
            },err=>{
              console.log(err);
            })
          })
        }
      },
      showFolders(event,index) {
        let display = $(event.currentTarget).siblings('ul').css("display");
        if ( display == 'none'){
          $(event.currentTarget).addClass("rotate");
          $(event.currentTarget).parent().siblings().find('ul').hide();
          $(event.currentTarget).siblings('ul').css("display","block");
        }else {
          $(event.currentTarget).removeClass("rotate");
          $(event.currentTarget).siblings('ul').css("display","none");
        }
        if( display == 'none') {//点击时做出判断，是否重新发送请求
          this.$nextTick(function(){
            let proId = this.$store.state.projectId;
            var subId= this.folders[index].subprojectId;
            const SUB_PRO_URL = DevTrackApi + '/SubProject/GetTree';
            this.$http.post(SUB_PRO_URL,{
              token:APIToken,
              projectId: proId,
              subprojectId: subId,
            }).then(res=>{
              this.folderList = res.body.Data.nodes;
            },err=>{
              console.log(err);
            })
          })
        }
      },
      changeThirdLevel(text,subType){
        this.$store.commit({
          type: 'changeThirdLevel',
          text: text,
          subType: subType
        })
      },
      changeListIcon(bool) {
        this.$store.commit({
          type: 'changeListIcon',
          showListIcon: bool
        })
      },
      closeBackLog() {
       this.backLogListShow(false);
      },
      backLogListShow(flag) {
        this.$store.commit({
          type:'switchBackLog',
          backLoglist: flag
        })
      },
      changeBackLogId(id) {
        this.$store.commit({
          type: 'changeBackLogId',
          backLogId: id
        })
      },
      clickPathIcon() {
       this.isSearchPanelShow = true;
       this.isBoardsBackend = true;
      },
      addTask(event) {
        var _this = this;
        var newTitle = this.newTaskTitle;
        var curStatusId = $(event.currentTarget).attr("status");
       if( newTitle != '') {
          const CREATE_TASK =DevTrackApi +'Task/Create';
          var createObj ={
            projectId: _this.projectId,
            subprojectId: _this.subProjectId,
            statusId: curStatusId,
            taskId: 0,
            data: [
                  {id: 101, value: newTitle}
                ]
          }
          this.axios.post(CREATE_TASK,createObj).then(res=>{
            if(res.data.Success) {
              var taskId = res.data.Data.Data;
              var taskObj = {
                taskId:taskId,
                values: [
                  {choiceid:curStatusId,id:601,name:"Progress Status",value:""},
                  {id:101,name:"Title",value:newTitle},
                  {choiceid:'',id:108,name:"Assigned To",value:''}
                ]
              }
              console.log(taskObj)
              // 更改vuex state
              this.DEV.devBoardTasks[0].children.unshift(taskObj);
               this.changeDevBoardTasks(this.DEV.devBoardTasks);
              this.newTaskTitle=''
            }
          },err=>{
            console.log(err)
          })
       }
      },
      addAllTasks(tasks) {
        this.$store.commit({
          type: 'addAllTasks',
          allTasks: tasks
        })
      },
      addAllStatus(status) {
        this.$store.commit({
          type: 'addAllStatus',
          allStatus: status
        })
      },
      showAssignedPanel(e) {
        this.showAssignedPop = true;
      },
      btnOkSetting(){
       this.showSettingPopTip = false;
       var _this = this;
        switch( this.GroupByValue ) {
          case 'None':
            _this.$router.push('/homepage/development/boards');
            break;
          case 'Status Group':
            _this.$router.push('/homepage/development/groupBy');
            break;
        };
      },
      btnNoSetting(){
        this.showSettingPopTip = false;
      },
      changeAssign(event){
         var e = event;
          e.stopPropagation();
          if($(event.currentTarget).parent().siblings(':visible').length > 0)
          {
            $(event.currentTarget).parent().siblings().hide();
          }
          else
          {
            $(event.currentTarget).parent().siblings().show();
          }
      },
      addMember(e){
        $('.ivu-poptip-popper').hide();
        $('.boardsBackend').css("background","#fff");
        this.modal = true;
        this.changeBoardsBackend(true)
      },
      modalCancel(){
        this.modal = false;
        this.changeBoardsBackend(false)
      },
      inputFocus(e){
          e.stopPrapagation();
      },
      inviteOk(){
        this.changeBoardsBackend(false)
      },
      chooseMember(statusId,statusIndex,taskIndex,member){
        Vue.set(this.boardViewTasks[statusIndex].children[taskIndex].values,'assigned', member.ChoiceName);
        let _this = this;
        let projectId = this.projectId;
        let taskId =this.boardViewTasks[statusIndex].children[taskIndex].taskId;
        let memberName = member.ChoiceName;
        let memberId = member.ChoiceId;
        let memberObj = {
          token: APIToken,
          taskId: taskId,
          projectId: projectId,
          data: [ {id:108,value:member.ChoiceName,ChoiceId:member.ChoiceId}]
        }
        
        this.changeAssignMember(memberObj);
        $('.ivu-poptip-popper').hide();
        // this.getTasksData();
        this.saveEditTask(memberObj);
        this.getPerStatusTask({"statusId":statusId,'statusIndex':statusIndex})
      },
      ...mapMutations(['changeDevBoardTasks','addBackLogList','changeBoardViewTasks','addBackLogList','changeBoardViewTasks','changeCurrentTaskId','changeEditPanelStatus','switchBackLog','changeIds','changeNewTaskTitle','getNewTaskId','changeNewTaskFlag','changeTempId','changeBoardsBackend']),
      ...mapActions(['saveEditTask','changeAssignMember','addATask','upDateBoardsDisplay','getTasksData','getPerStatusTask','updateTaskMoved'])
    },
    watch:{
      showEditPanel: function() {
        let showEditPanel = this.showEditPanel;
        let showBackLogList = this.showBackLogList;
        if( showEditPanel === true) {
            $('.wrapper').width($(window).width()-350);
        }else {
            $('.wrapper').width($(window).width());
        }
      },
    },
    components: {
      editPanel,
      VueEditor,
      folder
    }
  }
</script>
<style lang="scss" scoped="" type="text/css">
  @import './boards.scss';
  @import 'poptip.scss';
</style>
