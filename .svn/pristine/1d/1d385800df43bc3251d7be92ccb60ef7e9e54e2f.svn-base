<template>
  <div class="boards">
    <div class="boards-title">
        <div class="boards-container">
          {{reViewNumber}}
            <!--header breadcrumb-->
            <div class="boards-title-left left">
              <div class="title-bread">
                <p class='left title-common path' :class="'pathicon'+pathIcon">
                    <span v-if='!parentTxt && !childTxt' :title='projectSpace' class='projectSpaceIcon' >{{projectSpace}}</span>
                    <span v-if='parentTxt'>{{parentTxt}}</span>
                    <span v-if='childTxt'>/{{childTxt}}</span>
                </p>
                <span class='title-common dirIcon left'></span>
                <div class="search-mes left title-common"
                     @click="openSearchPanel"
                >
                  <i class="fa fa-caret-up"></i>
                </div>
                <!--search panel-->
                <transition name="searchPanel" mode="out-in" appear>
                  <div
                  class="search-mes-panel"
                  v-show="isSearchPanelShow"
                  >
                  <div class="search-mes-panel-top">
                      <span class="x right" @click="closeSearchPanel">
                        <i  class="fa fa-close"></i>
                      </span>
                  </div>
                  <div class="search-mes-input">
                    <span class="search-msg-icon left">
                      <i class="fa fa-search"></i>
                    </span>
                    <input type="text" ref="search" class="left search-mes-input-bar" placeholder="Search" @keyup="query">
                    <div class="clearfix"></div>
                  </div>
                  <div class="mes-panel-list">
                       <!--First level -->
                      <div class="panel-first-title">
                          <ul class="second-title" v-show="showProjectList">
                              <li class="dev-items">
                                <p class="dev-items-icon left" @click="showSprintList($event)">
                                  <i class="fa fa-caret-down"></i>
                                </p>
                                <span class="second-title-content left" :title=projectSpace @click='projectSpaceSwitch($event)'>
                                 {{projectSpace}}
                                </span>
                                <div class="clearfix"></div>
                                <ul class="dev-item">
                                  <li class='sub-item left' v-for='(sprint,$index) in sprints'>
                                    <p class="dev-items-icon sprintCaret" v-if='sprint.hasChild == true' @click='showSprintTask($event,$index)'>
                                      <i class="fa fa-caret-down"></i>
                                    </p>
                                    <p  class='sub-item-text left'  
                                        @click='switchDisplay($event,$index)'
                                        :class="'icon'+sprint.subprojectType"
                                        :title=sprint.subprojectName>
                                      {{sprint.subprojectName}}
                                    </p>
                                    <div class='clearfix'></div>
                                    <ul class='task-list'>
                                      <li class='task-list-item' v-for='(folder,$index) in folders'>
                                        <p class="folder-items" v-if='folder.hasChild == true' @click='showFolders($event,$index)'>
                                            <i class="fa fa-caret-down"></i>
                                        </p>
                                        <p class='folderName left' 
                                          :class="'folder'+folder.subprojectType" 
                                          @click='switchFolderTask($event,$index)'>
                                          {{folder.subprojectName}}
                                        </p>
                                        <div class='clearfix'></div>
                                        <ul class='folders' v-if='folder.hasChild == true'>
                                          <li class='folder-item'
                                              :class="'file'+folderItem.subprojectType"
                                              v-for="folderItem in folderList" 
                                              @click='folderSwitch($event,$index)'>
                                            {{folderItem.subprojectName}}
                                          </li>
                                        </ul>
                                      </li>
                                    </ul>
                                  </li>
                                  <div class='clearfix'></div>
                                </ul>
                              </li>
                          </ul>
                      </div>
                      <!-- Second level-->
                  </div>
                </div>
                </transition>
                <div class="filter left title-common">
                  <i
                    class="fa fa-filter"
                    id="boards-filter-icon"
                    @click="openFilter"
                  ></i>
                  <transition name="filterPanel" mode="out-in" appear>
                    <div
                      class="filter-select"
                      :class="{filterPanelShow:isFilterShow}"
                      v-show="isFilterShow"
                    >
                      <div class="filter-top">
                      <span class="filter-top-text left">
                        Filter Tasks
                      </span>
                      <span class="x right" @click="closeFilter">
                        <i  class="fa fa-close"></i>
                      </span>
                      </div>
                      <ul class="filter-by">
                        <li v-for="item in filterByItems"
                            class="filter-by-item"
                            :class="item.icon">
                          <a href="javascript:;" :class=item.icon>
                            {{item.name}}
                          </a>
                        </li>
                      </ul>
                    </div>
                  </transition>
                </div>
              </div>
              <div
                class="boardsBackend"
                v-show="isBoardsBackend"
              ></div>
            </div>
            <!--filter by month fullScreen-->
            <div class="boards-title-right right">
                <a href="javascript:;"  class="month" @click="filterMonth">
                  {{monthTitle}}<i class="fa fa-caret-down"></i>
                  <ul class="months" v-show="filterMonthShow">
                      <li v-for="(month,$index) in months"
                          @click.stop="chooseMonth($event,$index)"
                          :month="monthTitle"
                          :class="{monthStyle:monthIndex == $index}"
                      >
                        {{month}}
                      </li>
                  </ul>
                </a>
                <a href="javascript:;" @click="chooseStatus" class="chooseStatus">
                  <i class="fa fa-gear"></i>
                  <i class="fa fa-caret-down"></i>
                  <div class="setting"  v-show="settingListShow">
                    <ul>
                      <li class="setting-item" v-for="(item,$index) in statusList">
                        <input type="checkbox"  v-model='selectedStatusIndex' :value=$index>
                        <span class="item-status">{{item.ChoiceName}}</span>
                      </li>
                    </ul>
                    <div class="setting-btn">
                      <span class="btn-ok setting-btn" @click.stop="btnOk">OK</span>
                      <span class="btn-reset setting-btn" @click.stop="btnNo">NO</span>
                    </div>
                  </div>
                </a>
                <a href="javascript:;" @click="fullScreen" title="Toggle Full Screen">
                  <i class="fa fa-expand"></i>
                </a>
            </div>
            <div class="clearfix"></div>
          </div>
        <!-- responsive column below-->
        <div class="boards-status-title">
          <div class="status-title-common" v-for="(status,$index) in statusList" v-show=status.IsActive>
            {{status.ChoiceName}}
            <span class="right">3</span>
          </div>
        </div>
        <!--card list in below-->
        <div class="wrapper" style="width: 100%;">
          <div id="qaReview"
               status="1"
               class="status-wrapper container"
               v-dragula="box"
               service="effects"
          >
             <span class="to-add-card" @click="addNewTask" draggable="false">
              <div class="add-card-wrapper">
                <div
                  class="add-card-box"
                  id="add-card-box"
                  title="New Task"
                >
                  <span class="icon-ad">+</span>
                </div>
                <div class="form-box" id="form-box">
                  <form action="" class="form-box-content">
                    <div class="form-input-wrapper">
                      <input
                        type="text"
                        maxlength="200"
                        placeholder="New Task"
                        class="newinput"
                      >
                    </div>
                    <button type="submit" class="form-input-btn">
                      <span class="icon-btn">+</span>
                    </button>
                  </form>
                </div>
              </div>
            </span>
            <div
              class="action-card"
              status="1"
              v-for="(cardInfo,$index) in qaReviewCardInfos"
              :key="cardInfo.taskId"
              @click.capture="qaReviewDetails($event,$index)"
              :class="{'active':qareviewcardInfo.active,'unactive':!cardInfo.active}"
            >
              <div class="card-content">
                <p class="bg-content right"
                   :class= "cardInfo.values[7].value | assignedName"
                   v-if="cardInfo.cardType !== ''"
                >{{cardInfo.values[7].value | assignedName}}</p>
                <h4 class="card-msg">
                  <p>{{cardInfo.values[1].value}}</p>
                  <img :src='cardInfo.cardImage' class='cardImage' v-if="cardInfo.cardImage == ''">
                </h4>
              </div>
              <div class="card-meta">
                <div class="card-properties left">
                  <i class="icon-planlet"></i>
                  <i class="icon-calendar" v-if="cardInfo.cardCalendar !== ''">
                    Sep 22
                  </i>
                </div>
                <span class="id-badge right">ID{{cardInfo.taskId}}</span>
                <div class="clearfix"></div>
              </div>
            </div>
          </div>
          <div id="dropped"
               status="2"
               class="status-wrapper container"
               v-dragula="box"
               service="effects"
          >
            <div
              class="action-card"
              status="2"
              v-for="(cardInfo,$index) in droppedCardInfos"
              :key="cardInfo.taskId"
              @click.capture="droppedDetails($event,$index)"
              :class="{'active':droppedcardInfo.active,'unactive':!cardInfo.active}"
            >
              <div class="card-content">
                <p class="bg-content right"
                   :class= "cardInfo.values[7].value | assignedName"
                   v-if="cardInfo.cardType !== ''"
                >{{cardInfo.values[7].value | assignedName}}</p>
                <h4 class="card-msg">
                  <p>{{cardInfo.values[1].value}}</p>   
                  <img :src='cardInfo.cardImage' class='cardImage' v-if="cardInfo.cardImage == ''">
                </h4>
              </div>
              <div class="card-meta">
                <div class="card-properties left">
                  <i class="icon-planlet"></i>
                  <i class="icon-calendar" v-if="cardInfo.cardCalendar !== ''">
                    Jan 29
                  </i>
                </div>
                <span class="id-badge right">ID{{cardInfo.taskId}}</span>
                <div class="clearfix"></div>
              </div>
            </div>
          </div>
          <div id="qaVerify"
               status="3"
               class="status-wrapper container"
               v-dragula="box"
               service="effects"
          >
            <div
              class="action-card"
              status="3"
              v-for="(cardInfo,$index) in verifyCardInfos"
              :key="cardInfo.taskId"
              @click.capture="verifyCardDetails($event,$index)"
              :class="{'active':verifycardInfo.active,'unactive':!cardInfo.active}"
            >
              <div class="card-content">
                <p class="bg-content right"
                   :class= "cardInfo.values[7].value | assignedName"
                   v-if="cardInfo.cardType !== ''"
                >{{cardInfo.values[7].value | assignedName}}</p>
                <h4 class="card-msg">
                  <p>{{cardInfo.values[1].value}}</p>
                  <img :src='cardInfo.cardImage' class='cardImage' v-if="cardInfo.cardImage == ''">
                </h4>
              </div>
              <div class="card-meta">
                <div class="card-properties left">
                  <i class="icon-planlet"></i>
                  <i class="icon-calendar" v-if="cardInfo.cardCalendar !== ''">
                    Feb 17
                  </i>
                </div>
                <span class="id-badge right">ID{{cardInfo.taskId}}</span>
                <div class="clearfix"></div>
              </div>
            </div>
          </div>
          <div id="done"
               status="4"
               class="status-wrapper container"
               v-dragula="box"
               service="effects"
          >
            <div
              class="action-card"
              status="4"
              v-for="(cardInfo,$index) in doneCardInfos"
              :key="cardInfo.taskId"
              @click.capture="doneCardDetails($event,$index)"
              :class="{'active':donecardInfo.active,'unactive':!cardInfo.active}"
            >
              <div class="card-content">
                <p class="bg-content right"
                   :class= "cardInfo.values[7].value | assignedName"
                   v-if="cardInfo.cardType !== ''"
                >{{cardInfo.values[7].value | assignedName}}</p>
                <h4 class="card-msg">
                  <p>{{cardInfo.values[1].value}}</p>
                  <img :src='cardInfo.cardImage' class='cardImage' v-if="cardInfo.cardImage == ''">
                </h4>
              </div>
              <div class="card-meta">
                <div class="card-properties left">
                  <i class="icon-planlet"></i>
                  <i class="icon-calendar" v-if="cardInfo.cardCalendar">
                    Feb 20
                  </i>
                </div>
                <span class="id-badge right">ID{{cardInfo.taskId}}</span>
                <div class="clearfix"></div>
              </div>
            </div>
          </div>
          <div id="inProgress"
               status="5"
               class="status-wrapper container"
               v-dragula="box"
               service="effects"
          >
            <div
              class="action-card"
              status="5"
              v-for="(cardInfo,$index) in processCardInfos"
              :key="cardInfo.taskId"
              @click.capture="progressCardDetails($event,$index)"
              :class="{ 'active':processcardInfo.active,
                        'unactive':!cardInfo.active}"
            >
              <div class="card-content">
                <p
                  class="bg-content  right"
                  :class= "cardInfo.values[7].value | assignedName"
                  v-if="cardInfo.cardType !== ''"
                >{{cardInfo.values[7].value | assignedName}}</p>
                <h4 class="card-msg">
                  <p>{{cardInfo.values[1].value}}</p>
                  <!--<img src="../../../static/img/demo.png" v-if="cardInfo.cardImage !== ''">-->
                  <img :src='cardInfo.cardImage' class='cardImage' v-if="cardInfo.cardImage == ''">
                </h4>
              </div>
              <div class="card-meta">
                <div class="card-properties left">
                  <i class="icon-planlet"></i>
                  <i class="icon-calendar" v-if="cardInfo.cardCalendar">
                    Feb 20
                  </i>
                </div>
                <span class="id-badge right">ID{{cardInfo.taskId}}</span>
                <div class="clearfix"></div>
              </div>
            </div>
          </div>
          <div id="reviewed"
               status="6"
               class="status-wrapper container"
               v-dragula="box"
               service="effects"
          >
            <div
              class="action-card"
              status="6"
              v-for="(cardInfo,$index) in reviewedCardInfos"
              :key="cardInfo.taskId"
              @click.capture="reviewedDetails($event,$index)"
              :class="{ 'active':reviewedcardInfo.active,
                        'unactive':!cardInfo.active}"
            >
              <div class="card-content">
                <p
                  class="bg-content  right"
                  :class= "cardInfo.values[7].value | assignedName"
                  v-if="cardInfo.values[7].value !== ' '"
                >
                  <span>
                    {{cardInfo.values[7].value | assignedName}}
                  </span>
                </p>
                <h4 class="card-msg">
                  <p>{{cardInfo.values[1].value}}</p>
                  <img :src='cardInfo.cardImage' class='cardImage' v-if="cardInfo.cardImage == ''">
                </h4>
              </div>
              <div class="card-meta">
                <div class="card-properties left">
                  <i class="icon-planlet"></i>
                  <i class="icon-calendar" v-if="cardInfo.cardCalendar !== ''">
                    Feb 19
                  </i>
                </div>
                <span class="id-badge right">ID{{cardInfo.taskId}}</span>
                <div class="clearfix"></div>
              </div>
            </div>
          </div>
          <div id="toDo"
               status="7"
               class="status-wrapper container"
               v-dragula="box"
               service="effects"
          >
            <div
              class="action-card"
              status="7"
              v-for="(cardInfo,$index) in todoCardInfos"
              :key="cardInfo.taskId"
              @click.capture="toDoCardDetails($event,$index)"
              :class="{'active':todocardInfo.active,'unactive':!cardInfo.active}"
            >
              <div class="card-content">
                <p class="bg-content content-tz right"
                   :class= "cardInfo.values[7].value | assignedName"
                   v-if="cardInfo.cardType !== ''"
                >{{cardInfo.values[7].value | assignedName}}</p>
                <h4 class="card-msg">
                  <p>{{cardInfo.values[1].value}}</p>
                  <img :src='cardInfo.cardImage' class='cardImage' v-if="cardInfo.cardImage == ''">
                </h4>
              </div>
              <div class="card-meta">
                <div class="card-properties left">
                  <i class="icon-planlet"></i>
                  <i class="icon-calendar">
                    Jun 29
                  </i>
                </div>
                <span class="id-badge right">ID{{cardInfo.taskId}}</span>
                <div class="clearfix"></div>
              </div>
            </div>
          </div>
        </div>
        <!-- add new task-->
        <div class="newTask-panel" v-if="newTaskPanel">
          <div class="tabPanel">
            <ul class="tabItems">
               <li>
                 <a href="javascript:void(0)">Spec Description</a>
               </li>
               <li>
                 <a href="javascript:void(0)">History</a>
               </li>
               <li>
                  <a href="javascript:void(0)"><i class="fa fa-ellipsis-h"></i></a>
               </li>
               <div class="clearfix"></div>
            </ul>
          </div>
          <div class="panelDetail">
            <div class="panelDetailRow">
              <span class="row-title">Title</span>
              <input type="text" class="row-input" ref='taskTitle'>
            </div>
            <div class="panelDetailRow">
              <div class="status-column left">
                <span class="column-title">Status</span>
                <select class="choose-status" disabled="true" ref="chooseStatus" @change="hasSelectStatus">
                  <option class="status-option" v-for="statusOption in statusList">
                    {{statusOption.ChoiceName}}
                  </option>
                </select>
                <input type="button" class="but-choose" value="..." @click="chooseNewStatus">
              </div>
              <div class="owner-column left">
                <span class="controllable left">Spec Owner</span>
                <span class="owner-input" @click="selectOwner" :class="{outlineBorder: isClick}">
                   <input type="text" ref='ownerInput' max-length='5' @blur="outlineNone">
                   <span class="owner-icon">
                     <i class="fa fa-angle-down"></i>
                   </span>
                </span>
                <div class="owner-panel" v-show="showOwnerPanel">
                  <span class="owner-search">
                    <i class="fa fa-search"></i>
                    <input type="text">
                  </span>
                  <ul class="owner-list">
                    <li>{Unassigned}</li>
                    <li>{Submitter}</li>
                    <li>{Current Owner}</li>
                    <li>{Previous Owner}</li>
                    <li class="owner-item" v-for="(owner,$index) in newTaskOwner" @click="chooseOwner($event,$index)">
                      {{owner}}
                    </li>
                  </ul>
                </div>
                <div class="clearfix"></div>
              </div>
              <div class="clearfix"></div>
            </div>
            <div class="panelDetailRow">
              <span class="new-des">Description</span>
              <div class="new-content">
                <vue-editor id='editorContent' v-model="editorContent"></vue-editor>
              </div>
            </div>
            <div class="panelDetailRow">
              <span class="new-doc">Document</span>
              <div class="upload-file">
                <div class="upload-area">
                  <div class="upload-logo left">
                    <img src="../../../static/img/bg-new-attachment.png" alt="upload-logo">
                  </div>
                  <div class="upload-type left">
                    <h3>Drag file here to attach them or</h3>
                    <div class="select-upload-type">
                      <a href="javascript:void(0)">
                        Select File
                        <input type="file" value="" class="upload">
                      </a>|
                      <a href="javascript:void(0)">From Template</a>|
                      <a href="javascript:void(0)">Add...</a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="panelDetailRow">
              <span class="new-comments">Comments</span>
              <div class="add-comments">
                <div class="co-title">
                  <div class="co-adjust left"><i class="fa fa-chevron-down"></i></div>
                  <div class="co-set right">Setting</div>
                  <div class="clearfix"></div>
                </div>
              </div>
            </div>
            <div class="task-btn">
              <a href="javascript:void(0)" @click="addTask">Add</a>
              <a href="javascript:void(0)" @click="cancelAddTask">Cancel</a>
            </div>
          </div>
        </div>
    </div>
    <edit-panel
      v-show:editPanelShow="showEditPanel"
      :currentCardInfo="cardInfo"
      :transferedProjectId = "projectId"
      @listStatusIndex="hasListenedIndex"
      @closeEditPanel="getEventData"
      @hasSaved="updateTask"
      @owner="getOwner"
      >
    </edit-panel>
  </div>
</template>
<script>
  import Vue from 'vue'
  import editPanel from '../common/editPanel/EditPanel';
  import { VueEditor } from 'vue2-editor';
  export default {
    created () {
      let dragula = this.$dragula
      let service = dragula.createService({
        name: 'effects',
        drake: {
          copy: false
        }
      })
      let log = console.log
      service.on({
          'effects:removeModel': ({name, el, source, dragIndex, model}) => {
          el.classList.remove('ex-moved');
    },
      'effects:dropModel': ({name, el, source, target, dragIndex, dropIndex, model}) => {
        var statusCode = Number($(target).attr('status'))-1;//拖动后的状态
        var taskIdStr = $(el).children().filter('.card-meta').children('.id-badge').text();
        var movedTaskId = Number(taskIdStr.replace("ID",''));//获取到taskId

        // 移动task时，根据projectId/taskId/status修改task的状态
        var statusValue = this.statusList[statusCode].ChoiceName;
        const UPDATE_URL = DevTrackApi+'task/Update';
        this.$http.post(UPDATE_URL,{
            token: APIToken,
            projectId: 181,
            taskId: movedTaskId,
            data: [
              {id:601,value:statusValue}
            ]
          }).then(res =>{
            
          },err =>{
            console.log("err");
        })
      },
      accepts: ({el, target}) => {
        return true;
      },
      drag: ({el, source, target, container}) => {
        el.classList.remove('ex-moved')
        el.classList.remove('active')
      },
      drop: (opts) => {
        const {el, container, model} = opts
        el.classList.add('ex-moved');
      },
      over: ({el, container}) => {
       el.classList.add('ex-moved')
       el.classList.add('bg-placeholder')
      },
      out: ({el, container}) => {
        el.classList.add('ex-moved')
        el.classList.remove('bg-placeholder')
      }
    });
      this.uppercaseFilter();//过滤大写字母
      this.dateFilter();//时间转换
      this.getStatusList();  //status
      this.assignedName();//filter name abbrasive
      this.cardInfo = {};
      this.showTaskInfo(this.proId,this.subId);
    },
    data: function() {
      return {
        projectSpaceTxt: '',
        parentTxt: '',
        childTxt: '',
        editorContent: ' ',
        project: '',
        showOwnerPanel: false,
        isClick: false,
        newTaskPanel: false,
        box: [ ],
        end: '',
        settingListShow: false,//show status list
        isTransform: false,
        showProjectList: true,
        projectList: '',//project list data
        tasks: {},//store all project tasks
        sprintList: true,
        filterByItems: [
          { name: 'Followed by',icon:'followby'},
          { name: 'Assigned by',icon:'assigned'},
          { name: 'Due date',icon:'duedate'},
          { name: 'Tags',icon:'tags'},
          { name: 'Status by',icon:'statusby'}
        ],
        isFilterShow: false,
        isSearchPanelShow: false,
        isBoardsBackend: false,
        todoCardInfos: [],
        processCardInfos: [ ],
        verifyCardInfos: [ ],
        doneCardInfos: [ ],
        qaReviewCardInfos: [ ],
        droppedCardInfos: [ ],
        reviewedCardInfos: [ ],
        showEditPanel: false,
        cardInfo: '',//data
        todocardInfo: '',
        processcardInfo: '',
        verifycardInfo: '',
        donecardInfo: '',
        droppedcardInfo: '',
        qareviewcardInfo: '',
        reviewedcardInfo: '',
        months: ['all','Jan','Feb','Mar','Apr','May','June',' July','Aug','Sept','Oct','Nov','Dec'],
        monthTitle: 'Month',
        monthIndex: '',
        filterMonthShow: false,
        statusList:'',
        selectedStatusIndex: [], //use for store selected status to display
        projectId: '',
        newTaskOwner: [],
        subProjects: [],
        sprintListIcon: false,
        selectContent: '',
        sprints: '',
        showTaskList: true,
        sprintsTasks: '',
        folders: '',
        folderList: '',
        pathIconType: '',
        // flag: true,//判断当前的dropdown 是否改变
        tempFlag: '',//中转 临时存放vuex中flag,
      }
    },
    computed: {
      proId: function() {
        return this.$store.state.projectId;
      },
      subId: function() {
        return this.$store.state.subProjectId;
      },
      reViewNumber: function() {
        
        return this.qaReviewCardInfos.length;
      },
      projectSecondLevelText: function(){
        return this.$store.state.secondLevel.text;
      },
      projectSecondLevelIcon: function(){
        return this.$store.state.secondLevel.subType;
      },
      projectThirdLevelText: function(){
        return this.$store.state.thirdLevel.text;
      },
      projectThirdLevelIcon: function(){
        return this.$store.state.thirdLevel.subType;
      },
      projectBase: function() {
        return this.$store.state.projectBase;
      },
      projectSpace: function(){
        return this.$store.state.selectContent;
      },
      pathIcon: function() {
        if ((this.parentTxt == '') && (this.childTxt =='')) {
          return this.$store.state.subProjectType;
        }else {
          return this.pathIconType;
        }
      }
    },
    watch: {
      subId: function(){
        this.showTaskInfo(this.proId,this.subId);
        this.initTree(this.proId,this.subId);
      }
    },
    methods: {
      initTree(projectBaseId,subProjectSpaceId) {

        const SUB_PRO_URL = DevTrackApi + '/SubProject/GetTree';
        this.$http.post(SUB_PRO_URL,{
            token:APIToken,
            projectId: projectBaseId,
            subprojectId: subProjectSpaceId,
        }).then(res=>{
            this.sprints = res.body.nodes;
        },err=>{
            console.log(err);
        })
      },
      query() {
        let searchValue = this.$refs.search.value ;
        let filter = searchValue.toUpperCase();
        let projectArr = $('.second-title>li');
        for (let i=0; i<projectArr.length; i++) {
          var span = projectArr[i].getElementsByTagName('span')[0];
          if ( span.innerHTML.toUpperCase().indexOf(filter) > -1) {
            projectArr[i].style.display = ""; 
          }else {
            projectArr[i].style.display = "none"; 
          }
        }
      },
      fullScreen() {// full Screen
        var el = document.documentElement;
        var rfs = el.requestFullScreen || el.webkitRequestFullScreen || el.mozRequestFullScreen || el.msRequestFullScreen;
        if (typeof rfs != "undefined" && rfs) {
          rfs.call(el);
        } else if (typeof window.ActiveXObject != "undefined") {
          var wscript = new ActiveXObject("WScript.Shell");
          if (wscript != null) {
            alert("Please press F11");
            wscript.SendKeys("{F11}")
          }
        }
      },
      openSearchPanel(){
        this.isTransform = true;
        this.isSearchPanelShow=true;
        this.isBoardsBackend =true;
        $(".search-mes").addClass("transform");
      },
      closeSearchPanel(){
        this.isSearchPanelShow=false;
        this.isBoardsBackend = false;
        $(".search-mes").removeClass("transform");
      },
      openFilter(){
        this.isFilterShow = true;
        this.isBoardsBackend =true
      },
      closeFilter(){
        this.isFilterShow = false;
        this.isBoardsBackend = false
      },
      handleSubmit(){
        this.newTaskPanel = false;
        $("#add-card-box").css('display',"block");
        $("#form-box").css('display',"none");
      },
      addNewTask(){
        $("#add-card-box").css('display',"none");
        $("#form-box").css('display',"block");
        this.newTaskPanel = true;
      },
      newinputBlur(){
      },
      toDoCardDetails(event,index){
        this.showEditPanel = true;
        this.cardInfo = this.todoCardInfos[index];
        this.processCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.verifyCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.doneCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.qaReviewCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.droppedCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.reviewedCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.$nextTick(function(){//点击时添加card背景色
          this.todoCardInfos.forEach(function(item){
            Vue.set(item,'active', false)
          });
          Vue.set(this.todoCardInfos[index],'active',true)
        });
      },
      progressCardDetails(event,index){
        this.showEditPanel = true;
        this.processcardInfo=this.processCardInfos[index];
        this.cardInfo = this.processCardInfos[index];
        this.todoCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.verifyCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.doneCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.qaReviewCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.droppedCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.reviewedCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.$nextTick(function(){//点击时添加card背景色
          this.processCardInfos.forEach(function(item){
            Vue.set(item,'active',false);
          });
          Vue.set(this.processCardInfos[index],'active',true)
        });
      },
      verifyCardDetails(event,index){
        this.showEditPanel = true;
        this.verifycardInfo=this.verifyCardInfos[index];
        this.cardInfo = this.verifyCardInfos[index];
        this.todoCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.processCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.doneCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.qaReviewCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.droppedCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.reviewedCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.$nextTick(function(){//点击时添加card背景色
          this.verifyCardInfos.forEach(function(item){
            Vue.set(item,'active',false);
          });
          Vue.set(this.verifyCardInfos[index],'active',true)
        });
      },
      doneCardDetails(event,index){
        this.showEditPanel = true;
        this.donecardInfo=this.doneCardInfos[index];
        this.cardInfo = this.doneCardInfos[index];

        this.todoCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.processCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.verifyCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.qaReviewCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.droppedCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.reviewedCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.$nextTick(function(){//点击时添加card背景色
          this.doneCardInfos.forEach(function(item){
            Vue.set(item,'active',false);
          });
          Vue.set(this.doneCardInfos[index],'active',true)
        });
      },
      qaReviewDetails(event,index){
        this.showEditPanel = true;
        this.qareviewcardInfo=this.qaReviewCardInfos[index];
        this.cardInfo = this.qaReviewCardInfos[index];

        this.todoCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.processCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.verifyCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.droppedCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.reviewedCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.doneCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.$nextTick(function(){//点击时添加card背景色
          this.qaReviewCardInfos.forEach(function(item){
            Vue.set(item,'active',false);
          });
          Vue.set(this.qaReviewCardInfos[index],'active',true)
        });
      },
      droppedDetails(event,index){
        this.showEditPanel = true;
        this.droppedcardInfo=this.droppedCardInfos[index];
        this.cardInfo = this.droppedCardInfos[index];

        this.todoCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.processCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.verifyCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.reviewedCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.doneCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.qaReviewCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.$nextTick(function(){//点击时添加card背景色
          this.droppedCardInfos.forEach(function(item){
            Vue.set(item,'active',false);
          });
          Vue.set(this.droppedCardInfos[index],'active',true)
        });
      },
      reviewedDetails(event,index){
        this.showEditPanel = true;
        this.reviewedcardInfo=this.reviewedCardInfos[index];
        this.cardInfo = this.reviewedCardInfos[index];
        this.todoCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.processCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.verifyCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.doneCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.qaReviewCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });
        this.droppedCardInfos.forEach(function(item){
          Vue.set(item,'active', false)
        });

        this.$nextTick(function(){//点击时添加card背景色
          this.reviewedCardInfos.forEach(function(item){
            Vue.set(item,'active',false);
          });
          Vue.set(this.reviewedCardInfos[index],'active',true)
        });
      },
      getEventData(b){
        this.showEditPanel = b;
      },
      cardEnd(){
        this.end = true;
      },
      uppercaseFilter( ){//定义字母大写过滤器
        Vue.filter('uppercase', function(value) {
          if (!value) { return ''}
          value = value.toString()
          return value.toUpperCase();
        })
      },
      dateFilter( ) { //自定义时间过滤器
        Date.prototype.format = function(format)
        {
          var o ={
            "M+" : this.getMonth()+1, //month
            "d+" : this.getDate(),    //day
            "h+" : this.getHours(),   //hour
            "m+" : this.getMinutes(), //minute
            "s+" : this.getSeconds(), //second
            "q+" : Math.floor((this.getMonth()+3)/3),  //quarter
            "S" : this.getMilliseconds() //millisecond
          }
          if(/(y+)/.test(format))
            format=format.replace(RegExp.$1,(this.getFullYear()+"").substr(4 - RegExp.$1.length));
          for(var k in o)
            if(new RegExp("("+ k +")").test(format))
              format = format.replace(RegExp.$1,RegExp.$1.length==1 ? o[k] : ("00"+ o[k]).substr((""+ o[k]).length));
          return format;
        };
        Vue.filter('date',function (value) {
          var ddd = new Date(value);
          return ddd.format('yyyy/MM/dd');
        })
      },
      hasListenedIndex(index){//watcher Status index
      
      },
      filterMonth( ) {
        this.filterMonthShow = true;
      },
      chooseMonth(e,index) {//filter by month
        this.monthStatus = e.target.innerText;
        this.monthIndex=index;
        this.filterMonthShow = false;
      },
      
      showSprintList(event) {
         $(event.currentTarget).addClass("rotate");
          let display = $(event.currentTarget).siblings('ul').css("display");
        if ( display == 'none'){
          $(event.currentTarget).addClass("rotate");
          $(event.currentTarget).parent().siblings().find('ul').hide();
          $(event.currentTarget).siblings('ul').css("display","block");
        }else {
          $(event.currentTarget).removeClass("rotate");
          $(event.currentTarget).siblings('ul').css("display","none");
        }
        if (display == 'none') {
          var projectBaseId = this.$store.state.projectId;
          var subProjectSpaceId = this.$store.state.subProjectId;
          const SUB_PRO_URL = DevTrackApi + '/SubProject/GetTree';
          this.$http.post(SUB_PRO_URL,{
            token:APIToken,
            projectId: projectBaseId,
            subprojectId: subProjectSpaceId,
          }).then(res=>{
            this.sprints = res.body.nodes;
            this.showProjectPop = false;
          },err=>{
            console.log(err);
          })
        }
      },
      allProjectList(event) {
        //  hide or show all project list
        let _display = $(event.currentTarget).siblings('ul').css("display");
        if ( _display == 'none'){
          $(event.currentTarget).addClass("firstIconRotate");
          $(event.currentTarget).siblings('ul').css("display","block");
        }else {
          $(event.currentTarget).removeClass("firstIconRotate");
          $(event.currentTarget).siblings('ul').css("display","none");
        }
      },
      getStatusList() {
        const STATUS_LIST = DevTrackApi+'Field/ChoiceList?token='+APIToken+'&projectid=181&fieldid=601&languageid=1';
        this.$http.get(STATUS_LIST).then( response =>{
          this.statusList = response.body.data;
        }, error =>{
            console.log(error);
        });
      },
      chooseStatus() {
        this.settingListShow = true;
      },
      btnOk( ){//点击时，筛选出未被选中的状态，同时设置为隐藏
        let statusIndexArr = this.selectedStatusIndex;
        let statusList =new Array(0,1,2,3,4,5,6);
        let t=[];//被选中的状态index
        let tt=[];//未被选中的状态index
        let temp = statusIndexArr.toString();
        for(let i=0; i<statusList.length; i++) {// 临时存放被选中/未选中的index
          if (temp.indexOf(statusList[i]).toString() > -1) {
            t.push(statusList[i]);
          }else {
            tt.push(statusList[i]);
          }
        }
        for( let j=0 ; j<t.length; j++) {//只要被选中，全部为true
          let statusIndex = t[j];
          this.statusList[statusIndex].IsActive = true ;
          $('.wrapper').children().eq(statusIndex).show();
        }
        for(let m =0; m<tt.length; m++) {//未被选中，一直为false
          let sIndex = tt[m];
          this.statusList[sIndex].IsActive = false ;
          $('.wrapper').children().eq(sIndex).hide();
        }
      },
      btnNo( ) {
        this.settingListShow = false;
      },
      getTaskData(){
        let projectId = this.projectId,pageSize,pageIndex,getCount,languageId,column;
        const TASK_URL = DevTrackApi+'task/Query';
        this.$http.post(TASK_URL,{
                  "token": APIToken,
                  "projectId": projectId,
                  "showAll": false,
                  "pageSize": 10,
                  "pageIndex": 0,
                  "getCount": false,
                  "sortby": { "fieldId": 101, "order": "desc" },
                  "fields": [601,101,102,103,104,105,106,107,108,201,202,305],
                  "languageId": 0
                },{emulateJSON : true})
          .then( response =>{
                    this.tasks=response.body;
              },error =>{
                 console.log(error);
            })
      },
      assignedName() {
        Vue.filter('assignedName', function(value) {
          let arr =value.split(' ');
          let list=[];
          for(var i=0; i<arr.length; i++) {
            list.push(arr[i].charAt(0));
          }
          let last = list.join("");
          return last;
        })
      },
      showTaskInfo(proId,subId) {//显示页面task信息
        let projectId = proId;
        let subProjectId = subId;
        const TASK_URL = DevTrackApi+'task/Query';
        this.$http.post(TASK_URL,{
          "token": APIToken,
          "projectId": projectId,
          "showAll": false,
          "pageSize": 10,
          "pageIndex": 0,
          "getCount": false,
          "sortby": { "fieldId": 101, "order": "asc" },
          "fields": [601,101,102,103,104,105,106,107,108,201,202,305],
          "languageId": 0,
          query: {
          relation: 'and',
          condition: [
            { subProject: {valueIds:[subProjectId],includeChildren:true} }
            ]
          }
        }).then( response =>{
         this.qaReviewCardInfos = [];//清空
         this.droppedCardInfos = [];
         this.verifyCardInfos = [];
         this.doneCardInfos = [];
         this.processCardInfos = [];
         this.reviewedCardInfos = [];
         this.todoCardInfos = [];
         
         this.tasks=response.body;
         let taskArray = response.body.tasks;
         let _this = this;
         $.each(taskArray,function(index,value){
          var values = value['values'];
          let choiceId= values[0].choiceid;//get status id
          switch( choiceId ){//将获取的数据根据status，分类到各个状态
            case 3:
              _this.qaReviewCardInfos.push(taskArray[index]);
              break;
            case 17:
              _this.droppedCardInfos.push(taskArray[index]);
              break;
            case 36:
              _this.verifyCardInfos.push(taskArray[index]);
              break;
            case 37:
              _this.doneCardInfos.push(taskArray[index]);
              break;
            case 38:
              _this.processCardInfos.push(taskArray[index]);
              break;
            case 39:
              _this.reviewedCardInfos.push(taskArray[index]);
              break;
            case 40:
              _this.todoCardInfos.push(taskArray[index]);
              break;
          }
        })
      },error =>{
        console.log(error);
        })
      },
      updateTask(){
        location.reload();
      },
      selectOwner(){
        this.isClick = true;
        this.showOwnerPanel = true;
      },
      outlineNone() {
        this.isClick = false;
      },
      cancelAddTask() {
        this.newTaskPanel = false;
         $("#add-card-box").css('display',"block");
        $("#form-box").css('display',"none");
      },
      getOwner(value) {
        this.newTaskOwner = value;
      },
      chooseOwner(event,index) {
        this.$refs.ownerInput.value = this.newTaskOwner[index];
        this.showOwnerPanel = false;
      },
      chooseNewStatus() {
         this.$refs.chooseStatus.disabled = false;
      },
      hasSelectStatus() {
        this.$refs.chooseStatus.disabled = true;
      },
      addTask() {
        //添加taskId，各个字段
        let taskOwener = this.$refs.ownerInput.value;
        let taskStatusName = this.$refs.chooseStatus.value;
        let taskTitle = this.$refs.taskTitle.value;
        let taskId,projectIdTask = this.projectId;
        console.log(projectIdTask);
        const  ADD_TASK_URL = DevTrackApi+'task/Create';
        this.$http.post(ADD_TASK_URL,{
          token: APIToken,
          projectId: projectIdTask,
          taskId: 0,
          data: [
                {id: 601,value: taskStatusName},
                {id: 101, value: taskTitle},
                {id: 108, value: taskOwener}
                ]
        }).then(response =>{
           this.newTaskPanel = false;
          $("#add-card-box").css('display',"block");
          $("#form-box").css('display',"none");
        },error =>{
          console.log("error");
        });
      },
      projectSpaceSwitch(event){
        var proId = this.$store.state.projectId;
        var subId = this.$store.state.subProjectId;
        
        this.parentTxt =false;
        this.childTxt =false;
        var projectSpaceTxt = $(event.currentTarget).text().trim();
        
        this.showTaskInfo(proId,subId);
        this.isSearchPanelShow=false;
        this.isBoardsBackend = false;
        $(".search-mes").removeClass("transform");
      },
      switchDisplay(event,index) {
        var proId = this.$store.state.projectId;
        var subId = this.sprints[index].subprojectId;

        var txt = this.sprints[index].subprojectName;
        var type = this.sprints[index].subprojectType;
        var currentTxt = $(event.currentTarget).text().trim();
        this.parentTxt = currentTxt;
        this.childTxt = '';

        this.pathIconType = type;//改变path icon图标
        
        this.changeSecondLevel(txt,type);
        this.showTaskInfo(proId,subId);
        this.isSearchPanelShow=false;
        this.isBoardsBackend = false;
        $(".search-mes").removeClass("transform");
      },
      changeSecondLevel(text,subType){
        this.$store.commit({
          type: 'changeSecondLevel',
          text: text,
          subType: subType
        })
      },
      searchTask() {
      },
      showSubProject(projectId,subId){
        const SUB_PRO_URL = DevTrackApi+ '/SubProject/GetTree';
        this.$http.post(SUB_PRO_URL,{
            token:APIToken,
            projectId: projectId,
            subprojectId: subId,
        }).then(res=>{
            this.subProjects = res.body;
            this.sprints = res.body.nodes;
            // this.subProjects = res.body.nodes;
        },err=>{
          console.log(err);
        })
      },
      showSubSprint(subId) {
        $(event.currentTarget).addClass("rotate");
        let display = $(event.currentTarget).siblings('ul').css("display");
        if ( display == 'none'){
          $(event.currentTarget).addClass("rotate");
          $(event.currentTarget).parent().siblings().find('ul').hide();
          $(event.currentTarget).siblings('ul').css("display","block");
        }else {
          $(event.currentTarget).removeClass("rotate");
          $(event.currentTarget).siblings('ul').css("display","none");
        }
      },
      switchSprintDisplay(projectId,subprojectId) {
        const GET_SUB = DevTrackApi + '/Task/Query'
        this.$http.post(GET_SUB,{
          token: APIToken,
          projectId: projectId, 
          showAll: false,
          pageSize: 10,
          pageIndex: 0,
          getCount: false,
          sortby: { fieldId: 101, order: 'asc' }, //or desc
          fields: [601,101, 102, 103, 104, 105, 106, 107, 108, 201, 202, 305],
          query: {
            relation:'and',
            condition: [{ SubProjectValue: {valueIds:[subprojectId],IncludeChildren:true}}
            ]
          }
        }).then(response=>{
          console.log(response)
         this.qaReviewCardInfos = [];//清空
         this.droppedCardInfos = [];
         this.verifyCardInfos = [];
         this.doneCardInfos = [];
         this.processCardInfos = [];
         this.reviewedCardInfos = [];
         this.todoCardInfos = [];
         
         this.tasks=response.body;
         let taskArray = response.body.tasks;
         let _this = this;
         $.each(taskArray,function(index,value){
          var values = value['values'];
          let choiceId= values[0].choiceid;//get status id
          switch( choiceId ){//将获取的数据根据status，分类到各个状态
            case 3:
              _this.qaReviewCardInfos.push(taskArray[index]);
              break;
            case 17:
              _this.droppedCardInfos.push(taskArray[index]);
              break;
            case 36:
              _this.verifyCardInfos.push(taskArray[index]);
              break;
            case 37:
              _this.doneCardInfos.push(taskArray[index]);
              break;
            case 38:
              _this.processCardInfos.push(taskArray[index]);
              break;
            case 39:
              _this.reviewedCardInfos.push(taskArray[index]);
              break;
            case 40:
              _this.todoCardInfos.push(taskArray[index]);
              break;
          }
        })
        },err=>{
        console.log(err);
        })
      },
      showSprintTask(e,index) {
        let display = $(event.currentTarget).siblings('ul').css("display");
        if ( display == 'none'){
          $(event.currentTarget).addClass("rotate");
          $(event.currentTarget).parent().siblings().find('ul').hide();
          $(event.currentTarget).siblings('ul').css("display","block");
        }else {
          $(event.currentTarget).removeClass("rotate");
          $(event.currentTarget).siblings('ul').css("display","none");
        }
        if( display == 'none') {//点击时做出判断，是否重新发送请求
          this.$nextTick(function(){
            let proId = this.$store.state.projectId;
            var subId= this.sprints[index].subprojectId;
            // console.log(subId);
            // console.log(proId)
            const SUB_PRO_URL = DevTrackApi + '/SubProject/GetTree';
            this.$http.post(SUB_PRO_URL,{
              token: APIToken,
              projectId: proId,
              subprojectId: subId,
            }).then(res=>{
              this.folders = res.body.nodes;
            },err=>{
              console.log(err);
            })
          })
        }
      },
      showFolders(event,index) {
        let display = $(event.currentTarget).siblings('ul').css("display");
        if ( display == 'none'){
          $(event.currentTarget).addClass("rotate");
          $(event.currentTarget).parent().siblings().find('ul').hide();
          $(event.currentTarget).siblings('ul').css("display","block");
        }else {
          $(event.currentTarget).removeClass("rotate");
          $(event.currentTarget).siblings('ul').css("display","none");
        }
        if( display == 'none') {//点击时做出判断，是否重新发送请求
          this.$nextTick(function(){
            let proId = this.$store.state.projectId;
            var subId= this.folders[index].subprojectId;
            console.log(subId);
            console.log(proId)
            const SUB_PRO_URL = DevTrackApi + '/SubProject/GetTree';
            this.$http.post(SUB_PRO_URL,{
              token: APIToken,
              projectId: proId,
              subprojectId: subId,
            }).then(res=>{
              this.folderList = res.body.nodes;
            },err=>{
              console.log(err);
            })
          })
        }
      },
      folderSwitch(e,index) {
        var proId = this.$store.state.projectId;
        var subId = this.folderList[index].subprojectId;
        // console.log(subId);
        // console.log(proId);
        this.showTaskInfo(proId,subId);
        this.isSearchPanelShow=false;
        this.isBoardsBackend = false;
        $(".search-mes").removeClass("transform");
      },
      switchFolderTask(e,index) {
        var proId = this.$store.state.projectId;
        var subId = this.folders[index].subprojectId;
        var txt = this.folders[index].subprojectName;
        var type = this.folders[index].subprojectType;
        this.pathIconType = type;
        var parentTxt = $(e.currentTarget).parent().parent().siblings().text().trim('');
        var childTxt = $(e.currentTarget).text().trim();
        this.parentTxt = parentTxt;
        this.childTxt = childTxt;
        this.changeThirdLevel(txt,type);
        this.showTaskInfo(proId,subId);
        this.isSearchPanelShow=false;
        this.isBoardsBackend = false;
        $(".search-mes").removeClass("transform");
      },
      changeThirdLevel(text,subType){
        this.$store.commit({
          type: 'changeThirdLevel',
          text: text,
          subType: subType
        })
      }

    },
    components: {
      editPanel,
      VueEditor
    }
  }
</script>
<style lang="scss" scoped="" type="text/css">
  @import './boards.scss';
  @import '../../../static/grid_media.css';
  @import '../../../static/icon.css';
  /*@import '../../../node_modules/iview/dist/styles/iview.css';*/
</style>
