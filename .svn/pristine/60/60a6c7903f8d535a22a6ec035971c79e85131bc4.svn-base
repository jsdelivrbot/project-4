<template>
  <div class="top">
    <div class="container">
      <div class="tool">
        <div class="logo left">
          <a href="#/banner" class=""></a>
        </div>
        <div class="versions left" @click='ClickProjectSpace'>
          <Poptip placement="bottom" width="300">
             <div class="projectSpaceTitle" :title="selectContent">{{selectContent}}</div>
             <div class="api" slot="content">
               <h3 class="selectProject left">Projects</h3>
               <div class="selectClosed right">
                 <Checkbox v-model="showClosed" @on-change="showClosedProject">Show Closed Projects</Checkbox>
               </div>
               <div class="clearfix"></div>
               <div class="searchInput">
                      <input type="text" 
                            placeholder="Find Project" 
                            class="searchInput-val" 
                            v-model="projectBaseValue"
                            @keyup="queryProjectBase($event)"
                            >
                      <ul class="projectBaseList">
                        <li class="project-base-item" 
                            v-for="(baseItem,$index) in spaceList" 
                            :title="baseItem.subprojectName"
                            @click="selectChange(baseItem,$event)"
                            >
                          <div class="base-icon left">
                            <i class="fa fa-plane"></i>
                          </div>
                          <div class="base-name left">
                            <span>{{baseItem.subprojectName}}</span>
                          </div>
                          <div class="clearfix"></div>
                        </li>
                      </ul>
                    </div>
             </div>
          </Poptip>
        </div>
        <div class="useFor left">
          <div class="title">
            <span class="title-logo"  @click="toggle()">
              <!--<span class="fa fa-table logo common left"></span>-->
              <Select v-model="statusMenu"
                      style="width:8rem;" 
                      placeholder='Development' 
                      class='dropdown-menu'
                      @on-change="changeMenu($event)"
                      >
                  <Option v-for="item in status" :value="item.list" :key="item.list" v-show='item.isClick'>
                    {{ item.list}}
                  </Option>
              </Select>
            </span>
          </div>
        </div>
        <div class='listIcon-box add-testRun left' v-show='showTestIcon' @click=''>
            <span class='listIcon'>
              <i class="fa fa-plus" style="padding-bottom:3px;font-size:18px;" title="add test run template"></i>
            </span>
        </div>
        <div class="tool-right right">
          <div href="javascript:void(0)" class="filter left">
            <i class="fa fa-filter" @click="openFilter" title="filter"></i>
            <div class="filter-select"
                :class="{filterPanelShow:isFilterShow}"
                v-show="isFilterShow">
              <div class="filter-top">
                <h3>Filter</h3>
              </div>
              <ul class="filter-by">
                <li v-for="item in filterByItems"
                    class="filter-by-item"
                    @click="chooseFilter($event)"
                    :class="item.icon">
                  <div class="filter-icon left">
                    <img :src="item.path">
                  </div>
                  <div class="filter-name left">{{item.name}}</div>
                  <div class="clearfix"></div>
                </li>
              </ul>
              <div class="reset-filter">
                <a href="javascript:void(0)" @click="reset">Reset all filters</a>
              </div>
            </div>
          </div>
          <div class="search-bar left">
            <span class="search"></span>
            <input type="text" name="search">
          </div>
          <div class="set left">
            <span class="bell set-common left"></span>
            <span class="tj set-common left">Tj</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>
<script>
    import Vue from 'vue';
    import { mapState,mapMutations,mapActions } from 'vuex';
    export default {
    beforeCreate(){
        var _this = this;
        var requestProjectBaseId = this.axios.get(GET_HISTORY_INFO+'3000001');
        var requestProjectId = this.axios.get(GET_HISTORY_INFO+'3000002');
        this.axios.all([requestProjectBaseId, requestProjectId])
          .then(this.axios.spread(function (response1, response2) {
              var proId = response1.data.Data.PreferenceValue;
              var subPro = response2.data.Data.PreferenceValue;
              // console.log("projectId:"+proId,"subProject:"+subPro)
              // _this.getTree({"projectId":proId,"subProjectId":subPro});
              _this.getProjectNodes(proId,subPro);
              var obj = {projectId:proId,subProjectId:subPro}
              _this.changeIds(obj);
              _this.getLinkedSpace();
              _this.getMembers();
        }));
    },
    created() {

      this.initProject();
    },
    props: ['current'],
    data:function(){
      return {
        folderTree:[],//存放folder tree nodes
        showClosed:false,
        owners:'',
        status:[
          {list:'Home', listto:'/homepage/Home', isClick: true,spaceId: ''},
          {list:'Management', listto:'/homepage/management', isClick: false,spaceId: '41'},
          {list:'Requirement', listto:'/homepage/Requirement', isClick: false,spaceId: '32'},
          {list:'Development', listto:'/homepage/development/boards', isClick: true,spaceId: '1'},
          {list:'Test Run', listto:'/homepage/test/testRun', isClick: false,spaceId: '14'},
          {list:'Test Library', listto:'/homepage/test/testLibrary', isClick: false,spaceId: '13'},
          {list:'Members', listto:'/homepage/members', isClick: true,spaceId: ''},
          {list:'Administrator', listto:'/homepage/administrator', isClick: true,spaceId: ''},
        ],
        filterByItems: [
          { name: 'Followed by',
            icon:'followby',
            path:'../../../../static/img/followby.png',
            title:'',
            children:[]
          },
          { name: 'Owner',
            icon:'assigned',
            path:'../../../../static/img/assignedby.png',
            title:'Owner',
            children:['Jerry Ron','Json brog','terry json','Jerry Ron','Json brog','terry json']
          },
          { name: 'Status',
            icon:'statusby',
            path:'../../../../static/img/statusby.png',
            title:'Status',
            children:[]
          },
          { name: 'Due date',
            icon:'duedate',
            path:'../../../../static/img/duedate.png',
            title:'',
            children:[]
          }
        ],
        show: false,
        currentStatus: 'Development',
        statusIndex: '',
        projectSpace: [],
        selectContentSpace:'',
        flag: true,
        statusMenu: '',
        isFilterShow: false,
        ownerChildrenShow: false,
        projectBaseValue:"",
        tempPro:'',
        tempSubPro:'',
        tempToken:''
      }
    },
    computed: {
      isClick: function(){
          return false;
      },
      model1: function(){
        return this.$store.state.selectContent;
      },
      ...mapState(['userInfo','linkedSpaces','spaceList','selectContent','storeAllStatus','projectId','subProjectId','spaceIds','showListIcon','showBackLogList','backLogId','backLogList','showTestRunList','showTestIcon'])
    },
    methods: {
      getProjectNodes(projectId,subProjectId){
        this.changeListIcon({showListIcon:false})
        var temp=[];
        const GET_TREE = DevTrackApi +'/SubProject/GetTree';
        var nodesParam = {
            "IncludeClosed": false,
            "SubProjectId":subProjectId,
            "ProjectId":projectId,
        }
        this.axios.post(GET_TREE,nodesParam).then(res=>{
               if(res.data.Success){
                    var treeNodes = res.data.Data;
                    var nodeList = res.data.Data.nodes;
                    for(let i=0;i<nodeList.length;i++) {
                      if(nodeList[i].subprojectType == '2002'){
                        this.changeBackLogId({backLogId:nodeList[i].subprojectId});
                        this.changeListIcon({showListIcon:true})
                      }
                    }
                    var projectLevelObj = {
                          "projectId": treeNodes.projectId,
                          "subprojectId": treeNodes.subprojectId,
                          "subprojectName": treeNodes.subprojectName,
                          "subprojectType": treeNodes.subprojectType,
                          "isClosed": treeNodes.isClosed,
                          "hasChild": treeNodes.hasChild,
                          "nodes":[]
                      }
                   
                    if(treeNodes.hasChild && treeNodes.nodes.length>0) {
                      for(var i=0;i<treeNodes.nodes.length;i++) {
                          var secondParams = {
                            "IncludeClosed": false,
                            "SubProjectId":treeNodes.nodes[i].subprojectId,
                            "ProjectId":treeNodes.nodes[i].projectId,
                          }
                      this.axios.post(GET_TREE,secondParams).then(res=>{
                          if(res.data.Success){
                              projectLevelObj.nodes.push(res.data.Data);
                          }
                        },err=>{
                            console.log("child nodes response failed")
                        })
                      }
                    }
                    this.folderTree.push(projectLevelObj)
                    this.getFolderTree(this.folderTree)
                }else {
                    console.log("The http response false")
                }
            },err=>{
                console.log(err)
        })
      },
      initLinkedSpaces(){
        let spaces = this.linkedSpaces;
      },
      initProject(){
        // get history project id
        var _this = this;
        var projectList;
        var projectId, subProjectId;
        const GET_PRO_ID = DevTrackApi+'UserPreference/Get?projectId=0&prefId=3000001';
        this.axios.get(GET_PRO_ID).then(res=>{
            if(res.data.Success){
              projectId = res.data.Data.PreferenceValue
              // this.changeIds({"projectId":projectId,"subProjectId":''});
              // this.getMembers();
              // begin
                const  GET_PROJECTS = DevTrackApi +'SubProject/GetTree';
                var params = {
                  "ProjectId": projectId,
                  "SubProjectId": 0,
                  "IncludeClosed": false,
                }
                // get projects
              this.axios.post(GET_PROJECTS,params).then(res=>{
                  if(res.data.Success){
                    this.addSpaceList(res.data.Data.nodes);
                    projectList = res.data.Data.nodes;
                  }else {
                    console.log("The http response false data")
                  }
                },err=>{
                  console.log(err)
              })
                // get status
              const INIT_STATUS = DevTrackApi+'Field/ChoiceList?token='+APIToken+'&projectid='+projectId+'&fieldid=601&languageid=1';
              this.axios.get(INIT_STATUS).then(res=>{
                  if(res.status == 200) {
                    this.addAllStatus({allStatus:res.data.data});
                    let status = res.data.data;
                    // get tasks
                    this.getTasksData();
                  }else {
                    console.log("The http response a wrong status code in init status")
                  }
                },err=>{
                  console.log(err)
              })
              //end
            }else {
              console.log("The response data return false projectId")
            }
          },err=>{
            console.log(err)
        })

        //get history space id
        const GET_SUB_ID = DevTrackApi+'UserPreference/Get?projectId=0&prefId=3000002';
        this.axios.get(GET_SUB_ID).then(res=>{
            if(res.data.Success){
              subProjectId = res.data.Data.PreferenceValue;
              var _this = this;
              // this. getLinkedSpace();
              setTimeout(()=>{
                  for(let i=0;i<projectList.length;i++){
                  if(subProjectId ==projectList[i].subprojectId){
                    this.changeContent({selectContent:projectList[i].subprojectName})
                  }
                }
              },1500)
              
            }else {
              console.log("The response data return false spaceId")
            }
          },err=>{
            console.log(err)
        })
        
        
      },
      getMembers(){
        const MEMBER_URL = DevTrackApi+'Field/ChoiceList?'+'&projectId='+this.projectId+'&fieldId=108'+'&languageId=0';
        this.axios.get(MEMBER_URL).then(res=>{
          // console.log(res.body.data)
          this.addMembers(res.data.data);
        },err=>{
          console.log(err);
        })
      },
      toggle(){
        this.show = !this.show;
      },
      select(i,e){
        this.currentStatus = e.target.innerText;
        this.show = !this.show;
        this.statusIndex=i;
      },
      selectChange(item,e) {
        var _this = this;
        this.folderTree=[];
        this.getFolderTree(this.folderTree);
        this.changeCurPath(item);
        var list = this.projectSpace;
        var subId =item.subprojectId;
        var proId =item.projectId;
        this.getProjectNodes(proId,subId);
        this.selectChangeIds(proId,subId);
        this.getStatusSelectChange();
        this.backLogListShow(false);
        this.changeEditPanelStatus({b:false});
        this.getLinkedSpace();
        this.getTasksData();
        let newcontent = $(e.currentTarget).text();
        this.addContent(newcontent);
        
        $('.ivu-poptip-popper').hide();
        // save history path
        var params ={
          "ProjectId": 0,
          "UserId": 0,
          "PrefId": 3000002,
          "PreferenceValue": subId,
        }
        this.axios.post(SAVE_HISTORY_PATH,params).then(res=>{console.log("saved change spaceId")},err=>{})
        this.$router.push('/homepage/development/boards');
        console.log(this.currentStatus)
      },
      selectChangeIds(proId,subId){
        this.$store.commit({
          type: 'changeIds',
          projectId: proId,
          subProjectId: subId,
        })
      },
      addContent(content) {
        this.$store.commit({
          type: 'changeContent',
          selectContent: content
        })
      },
      ClickProjectSpace() {
        this.show = false;
      },
      getLinkedSpace() {
        for(let k=0;k<this.status.length;k++){
          switch(this.status[k].spaceId){
            case '41':
              Vue.set(this.status[k],'isClick',false);
              break;
            case '32':
              Vue.set(this.status[k],'isClick',false);
              break;
            case '13':
              Vue.set(this.status[k],'isClick',false);
              break;
            case '14':
              Vue.set(this.status[k],'isClick',false);
              break;
          }
        }
        var proId = this.projectId;
        var subId = this.subProjectId;
        const GET_LINKE_SPACE = DevTrackApi + 'subproject/LinkedSpaces';
        this.$http.post(GET_LINKE_SPACE,{
          token: APIToken,
          projectId: proId,
          SubProjectId: subId
        }).then(res=>{
          this.changeLinkedSpace(res.body.Data);//linkedSpace
          if (res.status == 200) {
            if(res.body.Success == true) {
                let linkedSpaces = res.body.Data;
                let linkedSpace = new Set();
                for(let i in linkedSpaces) {
                  for(let j=0; j<linkedSpaces[i].length;j++) {
                    linkedSpace.add(linkedSpaces[i][j].projectType)
                  }
                }
                var statusArr = this.status;
                for(let i of linkedSpace) {
                  for(let j =0;j<statusArr.length;j++) {
                    if(i == statusArr[j].spaceId){
                      Vue.set(this.status[j],'isClick',true)
                    }else if(i == 13) {
                      Vue.set(this.status[4],'isClick',true)
                    }
                  }
                }
            }else {
              console.log("The http request hasn't got available data1");
            }
        }else {
          console.log("The http response a wrong status code");
          }
        },err=>{
          console.log(err);
        })
      },
      changeMenu(event) {
        var _this = this;
        switch( event ) {
          case 'Home':
            _this.$router.push('/homepage/home');
            _this.changeTestRunList(false);
            _this.changeListIcon(true);
            _this.changeTestIcon(false);
            _this.saveHistorySpace(event)
            break;
          case 'Administrator':
            _this.$router.push('/homepage/administrator');
            _this.changeTestRunList(false);
            _this.changeListIcon(true);
            _this.changeTestIcon(false);
            _this.saveHistorySpace(event)
            break;
          case 'Members':
            _this.$router.push('/homepage/members');
            _this.changeTestRunList(false);
            _this.changeListIcon(true);
            _this.changeTestIcon(false);
            _this.saveHistorySpace(event)
            break;
          case 'Requirement':
            _this.$router.push('/homepage/requirement');
            _this.changeTestRunList(false);
            _this.changeListIcon(true);
            _this.changeTestIcon(false);
            _this.saveHistorySpace(event)
            break;
          case 'Management':
           _this.$router.push('/homepage/manage/manageView');
            _this.changeTestRunList(false);
            _this.changeListIcon(true);
            _this.changeTestIcon(false);
            _this.saveHistorySpace(event)
            break;
          case 'Test Run':
            _this.$router.push('/homepage/test/testRun');
            _this.changeListIcon(false);
            _this.changeTestIcon(true);
            _this.changeTestRunList(false);
            _this.saveHistorySpace(event)    
            break;
          case 'Test Library':
            _this.$router.push('/homepage/test/testLibrary');
            _this.changeListIcon(false);
            _this.changeTestIcon(true);
            _this.changeTestRunList(false);
            _this.saveHistorySpace(event)      
            break;
          case 'Development':
            _this.$router.push('/homepage/development/boards');
            _this.changeTestRunList(false);
            _this.backLogListShow(false);
            _this.changeListIcon(true);
            _this.changeTestIcon(false);
            _this.saveHistorySpace(event)
            break;
        };
      },
      saveHistorySpace(space){
        var _this = this;
        switch(space){
          case 'Home':
          var params = {
            "ProjectId": 0,
            "UserId": _this.userInfo.userId,
            "PrefId": 3000004,
            "PreferenceValue": 0,
            "PreferenceText":'/homepage/home'
          }
          _this.axios.post(SAVE_HISTORY_PATH,params).then(res=>{console.log("save home space")},err=>{})
          break;
          case 'Management':
          var params = {
            "ProjectId": 0,
            "UserId": _this.userInfo.userId,
            "PrefId": 3000004,
            "PreferenceValue": 41,
            "PreferenceText":'/homepage/manage/manageView'
          }
          _this.axios.post(SAVE_HISTORY_PATH,params).then(res=>{console.log("save management space")},err=>{})
          break;
          case 'Requirement':
          var params = {
            "ProjectId": 0,
            "UserId": _this.userInfo.userId,
            "PrefId": 3000004,
            "PreferenceValue": 32,
            "PreferenceText":'/homepage/requirement'
          }
          _this.axios.post(SAVE_HISTORY_PATH,params).then(res=>{console.log("save requirement space")},err=>{})
          break;
          case 'Development':
          var params = {
            "ProjectId": 0,
            "UserId": _this.userInfo.userId,
            "PrefId": 3000004,
            "PreferenceValue": 1,
            "PreferenceText":'/homepage/development/boards'
          }
          _this.axios.post(SAVE_HISTORY_PATH,params).then(res=>{console.log("save development space")},err=>{})
          break;
          case 'Test Run':
          var params = {
            "ProjectId": 0,
            "UserId": _this.userInfo.userId,
            "PrefId": 3000004,
            "PreferenceValue": 14,
            "PreferenceText":'/homepage/test/testrun'
          }
          _this.axios.post(SAVE_HISTORY_PATH,params).then(res=>{console.log("save test run space")},err=>{})
          break;
          case 'Test Library':
          var params = {
            "ProjectId": 0,
            "UserId": _this.userInfo.userId,
            "PrefId": 3000004,
            "PreferenceValue": 13,
            "PreferenceText":'/homepage/test/testLibrary'
          }
          _this.axios.post(SAVE_HISTORY_PATH,params).then(res=>{console.log("save test library space")},err=>{})
          break;
          case 'Members':
          var params = {
            "ProjectId": 0,
            "UserId": _this.userInfo.userId,
            "PrefId": 3000004,
            "PreferenceValue": 0,
            "PreferenceText":'/homepage/members'
          }
          _this.axios.post(SAVE_HISTORY_PATH,params).then(res=>{console.log("save member space")},err=>{})
          break;
          case 'Administrator':
          var params = {
            "ProjectId": 0,
            "UserId": _this.userInfo.userId,
            "PrefId": 300004,
            "PreferenceValue": 0,
            "PreferenceValue":'/homepage/administrator'
          }
          _this.axios.post(SAVE_HISTORY_PATH,params).then(res=>{console.log("save administrator space")},err=>{})
          break;
        }
      },
      switchBackLog() {
        if (this.showBackLogList == false) {
          this.backLogListShow(true);
          var proid = this.projectId;
          var subid = this.backLogId;
          this.getBackLoglist(proid,subid);
        }else {
          this.backLogListShow(false)
        }
      },
      backLogListShow(flag) {
        this.$store.commit({
          type:'switchBackLog',
          backLoglist: flag
        })
      },
      switchTestRunList() {
        var curWidth = $('.wrapper').width();
        if (this.showTestRunList == false) {
           this.TestRunListShow(true);
          $('.wrapper').width(curWidth-350);
         }else {
          this.TestRunListShow(false);
         $('.wrapper').width(curWidth+350);
         }
      },
      TestRunListShow(flag) {
        this.$store.commit({
          type:'switchTestRunList',
          TestRunList: flag
        })
      },
      changeTestIcon(flag) {
        this.$store.commit({
            type: 'changeTestIcon',
            showTestIcon: flag
        })
      },
      changeBackLogPath(backLogPath) {
        this.$store.commit({
            type: 'changeBackLogRootPath',
            backLogList: backLogPath
        })
      },
      changeListIcon(flag) {
        this.$store.commit({
            type: 'changeListIcon',
            showListIcon: flag
        })
      },
      changeTestRunList(flag) {
        this.$store.commit({
            type: 'changeTestRunList',
            testRunList: flag
        })
      },
      openFilter(){
        this.isFilterShow = true;
        this.changeBoardsBackend(true);
      },
      closeFilter(){
        this.isFilterShow = false;
        this.changeBoardsBackend(false);
      },
      chooseFilter(e){
        let childrenShow = $(e.currentTarget).children().find('filter-choose').css("display");
        if(childrenShow == 'none'){
          $(e.currentTarget).children().find('filter-choose').slideDown();
        }else {
          $(e.currentTarget).children().find('filter-choose').slideUp();
        }
      },
      reset(){
        this.changeBoardsBackend(false);
        this.isFilterShow = false;
      },
      queryProjectBase(e){
       let searchValue = this.projectBaseValue ;
       let filter = searchValue.toUpperCase();
       let projectBaseArr = $('.projectBaseList>li');
       for (let i=0; i<projectBaseArr.length; i++) {
          var span = projectBaseArr[i].getElementsByTagName('span')[0];
          if ( span.innerHTML.toUpperCase().indexOf(filter) > -1) {
            projectBaseArr[i].style.display = ""; 
          }else {
            projectBaseArr[i].style.display = "none"; 
          }
        }
      },
      showClosedProject(){
         let showClosed = this.showClosed;
         let projectId = this.projectId;
         const ALL_PROJECTS = DevTrackApi + 'SubProject/GetTree';
         if(showClosed) {
           
           this.axios.post(ALL_PROJECTS,{
                "IncludeClosed": true,
                SubProjectId: 0,
                projectId: projectId,
            }).then(res=>{
                if(res.data.Data.hasChild) {
                  this.addSpaceList(res.data.Data.nodes)
                  this.spaceList = res.data.Data.nodes;
                  console.log(res.data.Data.nodes)
                }else {
                  console.log('The http response a wrong data')
                }
              },err=>{
                console.log(err)
            })
         }else {
           this.axios.post(ALL_PROJECTS,{
                "IncludeClosed": false,
                SubProjectId: 0,
                projectId: projectId,
            }).then(res=>{
                if(res.data.Data.hasChild) {
                  this.addSpaceList(res.data.Data.nodes)
                  this.spaceList = res.data.Data.nodes;
                  console.log(res.data.Data.nodes)
                }else {
                  console.log('The http response a wrong data')
                }
              },err=>{
                console.log(err)
            })
         }
      },
      ...mapMutations(['changeListIcon','changeBackLogId','changeCurPath','getFolderTree','addAllStatus','changeContent','changeIds','addSpaceList','addMembers','changeEditPanelStatus','addSpaceIds','changeLinkedSpace','changeBoardsBackend']),
      ...mapActions(['getTree','getTasksData','getStatusSelectChange','getTasksData'])
    }
  }
</script>
<style lang="scss" scoped="" type="text/css">
  @import 'headerBar.scss';
</style>
<style>
  @import './cover.css';
</style>
